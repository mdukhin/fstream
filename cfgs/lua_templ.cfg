;==============================================================================
; LUA Template
;==============================================================================
[LUA_Akstat_Templ]
char init_lua = \
#{
   $CHAR(_lua_strbuf_)
   LUA do
      package.path = package.path..';$FSDIR/cfgs/lua_lib.cfg'
      require('lua_lib')

      _MONEY_ZERO_ = Qvalue.newMoney ("0")
;     =========================================================================
      Base_Akstat = _extend_(_Base_Akstat, {
         create_akstat = function(self, obj_name)
            _Base_Akstat.create_akstat(self, Auth, obj_name)
            if self.filter then self:set_filter() end
         end,
;        ----------------------------------------------------------------------
         set_filter = function(self)
            local _coll = Auth.obj_by_name('<null>', 'DB_Coll')
            self:filter(_coll)
            _coll.GetNamesList('_lua_strbuf_')
            ub_akstat = self.akstat.MakeAnyFilter('<null>', C._lua_strbuf_, _coll, '<null>', '<null>', 0)
            Unibank.RegObj(ub_akstat, '_akstat')
            self.akstat = _akstat
            Auth.delete_obj_by_name(_coll)
         end,
;        ----------------------------------------------------------------------
         set_where = function(self, where_cond)
            ub_akstat = self.akstat.MakeAnyFilter('<null>', '<null>', '<null>', '<null>', where_cond, 0)
            Unibank.RegObj(ub_akstat, '_akstat')
            local prev_akstat = self.akstat
            self.akstat = _akstat
            return prev_akstat
         end,
;        ----------------------------------------------------------------------
         create_detail = function (self, detail)
            detail:create_akstat()
            if not self.details then self.dtails = {} end
            table.insert(self.details, detail)
         end,
;        ----------------------------------------------------------------------
         sync_details = function(self)
            for i, detail in ipairs(self.details) do
               if detail.akstat then Auth.delete_obj_by_name(detail.akstat) end
               ub_akstat = self.akstat.GetOpnRfcObj(detail.rfc_name, Calc.cvtdii("DB_Astat::sql_opn:sqlSelect"), "<null>")
               Unibank.RegObj(ub_akstat, '_akstat')
               detail.akstat = _akstat
            end
         end,
;       ----------------------------------------------------------------------
         get_var_money = function(self, name)
            self.coll.RetrieveVarString(name, '_lua_strbuf_')
            return Qvalue.newMoney(C._lua_strbuf_)
         end,
;        ----------------------------------------------------------------------
         assign_var_money = function(self, name, value)
            self.coll.RemoveVar(name)
            local _value
            if type(value) == "string" then
               _value = value
            else
               _value = value:tostring()
            end
            self.coll.CreateVar(name, Calc.cvtdii("DB_Acoll::var_types:typeMoney"), _value)
         end,
;        ----------------------------------------------------------------------
         retrieve_var_string = function(self, name)
            self.coll.RetrieveVarString(name, '_lua_strbuf_')
            return C._lua_strbuf_
         end
      })
;     =========================================================================
      Excel_Akstat = _extend_(Base_Akstat, {
         id = 1,
         do_insert = function(self)
            self.akstat.DoInsertForColl(self.coll)
         end,
;        ----------------------------------------------------------------------
         insert = function(self)
            self:assign_var_long('id', self.id)
            self.id = self.id + 1
            self:do_insert()
         end
      })
;     =========================================================================
      ExcelChar_Akstat = _extend_(Excel_Akstat, {
         set_from_coll = function(self, coll, from_names, to_names)
            self.coll.ClearNames()
            local from_list, to_list = string.split(from_names), string.split(to_names)
            for i, _ in ipairs(from_list) do
               coll.RetrieveVarString(from_list[i], '_lua_strbuf_')
               self.coll.AssignVarString(to_list[i], C._lua_strbuf_)
            end
         end
      })
   end;
#}
;==============================================================================
[LUA_Group_Templ] default: LUA_Akstat_Templ
char init_lua =\
#{
   ${.:init_lua};

   LUA do
;     =========================================================================
      Group_Akstat = _extend_(_extend_(_Group_Akstat, Base_Akstat), {
         fld_list = nil,
;        ----------------------------------------------------------------------
         set_names = function(self, names)
            Base_Akstat.set_names(self, names)
            self.fld_list = string.split(names)
         end
      })
;     =========================================================================
      Akstat_Header = _extend_(_Akstat_Header, {
         init  = function(self, key, excel, excel_name, type)
            Header.init(self, key, type)
            self.excel = excel
            self.excel_name = excel_name
            local vartype, len
            self.excel.akstat.GetVarTypeLen(excel_name, 'vartype', 'len')
            self.excel_type = C.vartype
         end
      })
;     =========================================================================
      Akstat_Footer = _extend_(_Akstat_Footer, {
         excel = nil,
         excel_names = nil,
         excel_types = nil,
;        ----------------------------------------------------------------------
         init = function(self, keys, excel, excel_names, type)
            Footer.init(self, keys, type)
            self.excel = excel
            self.excel_names = {}
            self.excel_types = {}
            local key_list, excel_name_list = string.split(keys), string.split(excel_names)
            for i, key in ipairs(key_list) do
               self.excel_names[key] = excel_name_list[i]
               local vartype, len
               self.excel.akstat.GetVarTypeLen(self.excel_names[key], 'vartype', 'len')
               self.excel_types[key] = C.vartype
            end
         end
      })
   end;
#}
;==============================================================================
template [LUA_XIRR_Templ]
const char xirr_from_table_parms = tbl_name, fld_pmt, fld_date
const char xirr_from_table =\
#{
   $MONEY(_pmt)
   $CHAR(_pmt_list, _date_list, result)
   $LONG(_date)

   _pmt_list  = "";
   _date_list = "";
   CURSOR SELECT @fld_pmt, @fld_date into ?_pmt, ?_date
      FROM @tbl_name
      ORDER BY @fld_date
      :
      call("$CURCFG::$CURSEC:make_xirr_param");

   LUA do
      package.path = package.path..';$FSDIR/cfgs/lua_lib.cfg'
      require('lua_lib')

      local pmts  = string.split(C._pmt_list)
      for i, val in ipairs(pmts) do
         pmts[i] = val:mico_to_lua()
      end
      local dates = string.split(C._date_list)

      local result = xirr(pmts, dates)
      Calc["return"](Qvalue.newDecimal(tostring_mico(result)))
   end;
#}

const char xirr2_from_table_parms = tbl_name, fld_pmt, fld_date
const char xirr2_from_table =\
#{
   $MONEY(_pmt)
   $CHAR(_pmt_list, _date_list, result)
   $LONG(_date)

   _pmt_list  = "";
   _date_list = "";
   CURSOR SELECT @fld_pmt, @fld_date into ?_pmt, ?_date
      FROM @tbl_name
      ORDER BY @fld_date
      :
      call("$CURCFG::$CURSEC:make_xirr_param");

   LUA do
      package.path = package.path..';$FSDIR/cfgs/lua_lib.cfg'
      require('lua_lib')

      local pmts  = string.split(C._pmt_list)
      for i, val in ipairs(pmts) do
         pmts[i] = val:mico_to_lua()
      end
      local dates = string.split(C._date_list)
      local bp = calc_bp(dates)
      local result = xirr2(pmts, dates, bp)

      Calc["return"](Qvalue.newDecimal(tostring_mico(result*100*365/bp)))
   end;
#}

const char make_xirr_param =\
#{
   (@@_pmt_list == "")
      ? (_pmt_list = string(@@_pmt))
      : (_pmt_list = @@_pmt_list + "," + string(@@_pmt));

   (@@_date_list == "")
      ? (_date_list = string(@@_date))
      : (_date_list = @@_date_list + "," + string(@@_date));
#}
