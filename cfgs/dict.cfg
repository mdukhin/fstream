;======================================================================
; Объекты-справочники и прочие информационные объекты
;======================================================================

#opencfg "dbores.cfg"

SECPATH=abbrs::;ospcs::;::;$CURCFG::;.;\
#{";"
; для DOC_TYPE_..._MC_CD/CC/AD/AC
  dbores::
#}

;==================================================
; Объекты для pаботы с куpсами валют
;--------------------------------------------------
[DocRate]
const char main_class=DB_Kstat
const char read_access=any
const char insert_access=PLACE_RATES
const char update_access=$insert_access
const char delete_access=$insert_access
const char ks_table=docs
char ks_keys=c_doc
char ks_order=-op_day,type,c_doc

char kernel_prefix=RateDoc
char kernel_vars=Rates.
char exclude_fields=*
; подколлекция Rates полностью обрабатывается kernel'ом, поэтому
; соответствующий подобъект можно было бы сделать типа reference, но в
; то же время мы должны редактировать подколекцию через временный
; объект, а aux не разрешает это для read-only подобъектов. Поэтому
; сделал модифицируемым, но запретил выполнение всех операций.
char slave_refs=Rates($CURCFG::DocRatesByKind):c_doc;
char rfc_modifiers=Rates:iud;

char lookups=Type(Abbrs):type;
char foreigns=State(Abbrs):state(type);
; для коррекции валют курсов (Rates) при вставке
char references=RatesRpt($CURCFG::RatesRpt):doc_day(day),type;

char ks_defaults=op_day:@today;type:$DOC_TYPE_RATE_CHANGE_CB;
char ks_where=[type] in(\
$DOC_TYPE_RATE_CHANGE_CB,\
$DOC_TYPE_RATE_CHANGE_GOLD,\
$DOC_TYPE_RATE_CHANGE_AF,\
$DOC_TYPE_RATE_CHANGE_RSEC,\
$DOC_TYPE_RATE_CHANGE_CSEC)\
and [op_day]=@today

const char synonyms=\
#{
  rate_kind[SHORT]=type(
    $DOC_TYPE_RATE_CHANGE_CB:'$RATE_CBANK',
    $DOC_TYPE_RATE_CHANGE_AF:'$RATE_GOLD',
    $DOC_TYPE_RATE_CHANGE_GOLD:'$RATE_ROUBLE_SECURITY',
    $DOC_TYPE_RATE_CHANGE_RSEC:'$RATE_CURR_SECURITY',
    $DOC_TYPE_RATE_CHANGE_CSEC:'$RATE_AUTH_FUND',
    '0');
#}

; Если задана подколлекция Rates, то дополнаяем ее записи данными 
; из curr_rates при этом удлаяем лишние записи (для тех валют, которых нет
; в curr_rates)
; Полученные записи копируем в подколлекцию IO.Rates для вставки
const char pipe_pre_insert=\
#{
  flt = @THIS.GetOpnRfcObj("RatesRpt",
              cvtdii("DB_Astat::sql_opn:sqlDefault"), CURRENT.get_name());
; Для каждой (индексированной) подколлекции Rates
; готовим ключи записи (c_curr) если они не заданы но есть lookup-атрибуты
  CURRENT.PrepareVars("Rates.*.c_curr");
  Lua do 
    Unibank.RegObj(C.flt, "flt")
    if CURRENT.SubcolByName("Rates", "Rates") == 0 then
      index = 0
      Unibank.RegObj(C.Rates, "Rates")
      while Rates.GetIndexedSubcol(index, "isubcol") == 0 do
        flt.KeysFromCollection(C.isubcol)
        if flt.Search() == 0 then
          flt.DoUpdateForColl(C.isubcol)
        end  
        index = index + 1
      end  
    end  
  end;
; создаем подколлекцию IO.Rates и копируем туда всё из Rates
  CURRENT.NewSubcol("IO.Rates", "iorates");
  CURRENT.SomeVarsToColl("Rates.*.c_curr", @@iorates, "*.c_curr");
; после выполнения pre_insert переменные из IO.Rates будут добавлены в Rates,
; но мы не хотим чтоб вставлялись валюты, которых нет в пред. дне, поэтому
; мы формируем в IO.Rates не меньше индексированных подколлекций чем в
; Rates и перед зачитыванием вводимых курсов забиваем эти подколлекции нулями
  $LONG(zero_curr) zero_curr=0;
; здесь забиваем нулями атрибут c_curr всех индексированных подколлекций
  CURRENT.SomeVarsToColl("zero_curr", @@iorates, "*.c_curr");
; зачитываем все курсы,которые надо вводить  
  @flt.LoadToColl("c_curr,nunits,rate", @@iorates, -1);
  Auth.delete_obj_by_name(@@flt);
#}

const char pipe_pre_insert_ERR=\
#{
  -Auth.delete_obj_by_name(@@flt);
#}

const char spc_codes=\
#{
  $spcDocToEnter:PLACE_RATES;
  $spcDocPerform:PLACE_RATES;
#}
;--------------------------------------------------
; special через DB_Kernel
char spc_default=\
#{
  @DefaultSpc(c_doc,op_day,state)
#}
char DefaultSpc_vld=\
#{
  BREAK=$CURCFG::$CURSEC.InvokeKernel( "DB_Kernel::RateDocSpcVld",
    CURRENT.get_name(), CURRENT.get_name() );
#}
char DefaultSpc=\
#{
  $CURCFG::$CURSEC.InvokeKernel( "DB_Kernel::RateDocSpc",
    CURRENT.get_name(), CURRENT.get_name() );
#}
;--------------------------------------------------
[DocRateCB]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::DocRate
char ks_defaults=type:$DOC_TYPE_RATE_CHANGE_CB;
char ks_where=[type]=$DOC_TYPE_RATE_CHANGE_CB
;--------------------------------------------------
[Rates]
const char main_class=DB_Kstat
const char ks_table=docs_rate
const char ks_keys=c_doc,c_curr
char ks_order=c_doc,c_curr
; используем lookups для загрузки в UniCurs и для тестов
char lookups=\
#{
  Curr(dbores::Curr):c_curr;
; оставил на переходной период
  CurrInfo(dbores::Curr):c_curr;
#}
; надо указать эти права чтоб можно было редактировать AUX
; ниже мы запретим вставку/удаление напрямую с помощью pipe_pre_insert/delete
const char insert_access=PLACE_RATES
const char update_access=PLACE_RATES
const char delete_access=PLACE_RATES
const char pipe_pre_insert=RaiseError(-1, "Операция не разрешена")
const char pipe_pre_update=$pipe_pre_insert
const char pipe_pre_delete=$pipe_pre_insert
;--------------------------------------------------
[DocRatesByKind]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::Rates
const char ks_order=-CurrInfo.exchint_kind,c_curr
const char synonyms=\
#{
;  для более удобного отображения курсов
   fmtrate=nunits(1:strrate,rate_u);
   strrate=?rfmtdec(@rate,"<<<<<<<<<<<<<<<&.&&&&");
   rate_u=![strrate]/[nunits];
#}
;--------------------------------------------------
[RatesRpt]
const char main_class=DB_Ksrpt
const char insert_access=any
const char update_access=any
const char delete_access=any
const char log_opns=!
char cursor_type=dynamic
const char attrs=\
#{
  c_curr int,
  nunits int,
  rate money(16,4)
#}
const char ks_keys=c_curr
char base_attrs=day,type
char foreigns=Curr(dbores::Curr):c_curr;
char pipe_subobj=\
#{
  @@type!=0?
    KernRateChangeGetTable( @@day, long(@@type), @@_rpt_table ): 0;
#}  

;--------------------------------------------------
[DocRateCB_Form]
const char main_class=DB_Form
const char parent_kstat=$CURCFG::DocRateCB
char title=Курсы валют ЦБ
char scr_name=rates_form
char scr_mode=edit
char edt_modes=u1dX!p
char spc_list=/$spcDocPerform,$spcDocToEnter
char forms_aux=Rates:$CURCFG::RatesForm_aux;
char add_acts=\
#{
  *(any,dispatch,"Редактировать курсы#hРедактировать#w0#P2"): ' '
  { pipe=
      calc{expr='mode=(@@state==$DOC_STATE_ENTERED)? "view": "view+"'};
      subobj{aux=Rates,mode=%mode,userc=y};
      control
      { pipe=get_chgflag,
        break=continue,
        continue=
          control
          { pipe=message{place=ask,text='Вносить изменения в документ'},
            break=continue,
            continue=
              doopn{opn=update};
              dospc{codes=$spcDocPerform};
          };
;         всегда перечитываем, чтобы не было изменений
          doopn{opn=read}
      }
  }
#}
;--------------------------------------------------
[RatesForm_aux]
const char main_class=DB_XForm
char scr_name=ocurr_rate
; здесь была ошибка - было написано temp вместо tmp, до моей правки от
; Wed 2015-03-04 10:26:07 +0300 в этом случае считалось tmp (после неё
; неизвестный способ считается auto, что в данном случае приводит к raw,
; т.к. это подобъект 1xN). Кроме того подобъект был определён как
; read-only (reference), но ранее способ работы для read-only
; подобъектов 1xN не сбрасывался на raw, сбрасывался только для 1x1
; (непонятно по какой причине), так что способ оставался tmp. После
; правки работа со всеми подобъектами read-only ведётся "на месте" (raw)
; (т.к. иначе изменения будут проигнорированы во время операции над
; главным объектом), поэтому я изменил вид связи подобъекта Rates на
; slave_ref, что, кстати, является логичным - см.  комментарий у ресурса
; DocRate:slave_refs.
char style=tmp
char stdmode=view
char edt_modes=igd!p!P
long empty->add=1

;==================================================
; создание документа с курсами для нового дня
[RateCmds]
char new_rates=\
#{
  local("docrate_obj,iocoll");
  iocoll="<null>";
  docrate_obj="$CURCFG::DocRateCB";
  msg="Создавать документ с курсами?";  
; переоткрываем курсор на всякий случай  
  @docrate_obj.CloseQuery();
  @docrate_obj.ToFirst()==0?
    return(0):
  AskYesNo(@@msg)!=$ANSWER_YES?
    return(1): 0;
  local("rc");
  rc = $CURCFG::RatesDaySelect.RepaintGo();
  $CURCFG::RatesDaySelect.Pop();
  Auth.delete_obj_by_name("$CURCFG::RatesDaySelect");
  @@rc<=0?
    return(1): 0;
  iocoll=Auth.obj_by_name( "<null>", "DB_Coll" );
  StdEnv.SomeVarsToColl( "RatesDaySelect.day", @@iocoll, "doc_day" );
  @docrate_obj.DoInsertForColl( @@iocoll );
; переоткрываем курсор объекта, т.к. в него вставилась запись  
  @docrate_obj.CloseQuery();
  return(0);
#}
char new_rates_FINALLY=\
#{
 -Auth.delete_obj_by_name(@@iocoll);
#}  
;--------------------------------------------------
; объект для выбора doc_day при вводе документа курсов
[RatesDayS]
const char main_class=DB_Ksrpt
char attrs=day date
char ks_keys=day
char ks_order=-day
char pipe_prepare=\
#{
  $LONG(op_day) op_day=Otoday();
; вставляем сегодняшний день  
  SQL insert into @_rpt_table (day) values (?op_day);
; ... и все дни от последнего опердня до сегодняшнего  
  $DATE(prev_opday)
  prev_opday=@@op_day;
  SQL select max(op_day) into ?prev_opday
      from opdays
      where op_day<?op_day;
  SQL insert into @_rpt_table (day)
      select distinct op_day
      from curr_rate 
      where op_day>?prev_opday and op_day<?op_day;
#}
;--------------------------------------------------
; выбор даты документа
[RatesDaySelect]
const char main_class=DB_Form
const char parent_kstat=$CURCFG::RatesDayS
char title=Дата курса
char scr_name=date_sel
char scr_mode=tselect
char edt_modes=s!p!P
long save_current=1
char env_name=$CURSEC

;==================================================
; просмотр курсов валют
;--------------------------------------------------
[CurrRates]
const char main_class=DB_Kstat
const char ks_table=curr_rate
char ks_keys=kind,c_curr,op_day
char ks_order=-op_day,kind,c_curr
char foreigns=Kind($CURCFG::AbbrsCurrRateKind):kind(type);
; используем lookups для теста
char lookups=Curr(dbores::Curr):c_curr;
char synonyms=rrate[DEC]=?/rate,nunits/(@nunits? @rate/@nunits: 0);
;--------------------------------------------------
; виды курсов валют, для которых установлены курсы
[AbbrsCurrRateKind] dbores::SubAbbr
const char ks_where=[type] in(\
#{","
  $RATE_CBANK
#})
;--------------------------------------------------
; не Kscurs для эффективности
[CurrRateDay] default: CurrRates
char ks_where=[kind]=$RATE_CBANK
char ks_keys=c_curr,op_day
char ks_order=-op_day,c_curr
;--------------------------------------------------
[CurrRate]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::CurrRateDay
char ks_keys=c_curr,op_day=@today
char ks_order=c_curr
;--------------------------------------------------
[CurrRateForm]
const char main_class=DB_Form
const char parent_kstat=$CURCFG::CurrRates
char title=Просмотр курсов валют
char scr_name=curr_rate_tbl
char scr_mode=view
char edt_modes=s!p!P
;--------------------------------------------------
[CurrRateView]
const char main_class=DB_Form
const char parent_kstat=$CURCFG::CurrRates
char scr_name=curr_rate_frm
char filter_screen=curr_rate_tbl
char scr_mode=select
char edt_modes=s!P
[]
