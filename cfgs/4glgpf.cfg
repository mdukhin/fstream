; История изменений:
; 26.06.98 pr   Created
; 26.04.99 ww   Add type definition macros
; 03.08.99 ww   Use 4gl-return.
;###
;--------------------------------------------------
#opencfg "abbrs.cfg"
#opencfg "errkern1.cfg"
#opencfg "errop4gl.cfg"
#opencfg "formmsg.cfg"
SECPATH=abbrs::;$CURCFG::;
[]

;================================================================
; Type definitions
;================================================================
; Ex. $CHAR(s,ss)
; для ускорения (не вызывая DII) используется простое присваивание
template char CHAR=\
#{""
; ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeString"), "<null>" );}
  $1${1%+="";}
  $2${2%+="";}
  $3${3%+="";}
  $4${4%+="";}
  $5${5%+="";}
  $6${6%+="";}
  $7${7%+="";}
  $8${8%+="";}
#}
template char LONG=\
#{""
; ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeLong"), "<null>" );}
  $1${1%+=long(0);}
  $2${2%+=long(0);}
  $3${3%+=long(0);}
  $4${4%+=long(0);}
  $5${5%+=long(0);}
  $6${6%+=long(0);}
  $7${7%+=long(0);}
  $8${8%+=long(0);}
#}
template char SHORT=\
#{""
; тип SHORT не поддерживается в expr
  ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${2%+CURRENT.CreateVar( "}$2${2%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${3%+CURRENT.CreateVar( "}$3${3%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${4%+CURRENT.CreateVar( "}$4${4%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${5%+CURRENT.CreateVar( "}$5${5%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${6%+CURRENT.CreateVar( "}$6${6%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${7%+CURRENT.CreateVar( "}$7${7%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
  ${8%+CURRENT.CreateVar( "}$8${8%+", cvtdii("DB_Acoll::var_types:typeShort"), "<null>" );}
#}
template char DEC=\
#{""
; ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeDecimal"), "<null>" );}
  $1${1%+=decimal(0);}
  $2${2%+=decimal(0);}
  $3${3%+=decimal(0);}
  $4${4%+=decimal(0);}
  $5${5%+=decimal(0);}
  $6${6%+=decimal(0);}
  $7${7%+=decimal(0);}
  $8${8%+=decimal(0);}
#}
template char DATE=\
#{""
; ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeDate"), "<null>" );}
  $1${1%+=today;}
  $2${2%+=today;}
  $3${3%+=today;}
  $4${4%+=today;}
  $5${5%+=today;}
  $6${6%+=today;}
  $7${7%+=today;}
  $8${8%+=today;}
#}
template char MONEY=\
#{""
; ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeMoney"), "<null>" );}
  $1${1%+=money(0);}
  $2${2%+=money(0);}
  $3${3%+=money(0);}
  $4${4%+=money(0);}
  $5${5%+=money(0);}
  $6${6%+=money(0);}
  $7${7%+=money(0);}
  $8${8%+=money(0);}
#}
template char DTIME=\
#{""
; чтобы явно установить тип DATETIME
; $1${1%+=current;}
  ${1%+CURRENT.CreateVar( "}$1${1%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${2%+CURRENT.CreateVar( "}$2${2%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${3%+CURRENT.CreateVar( "}$3${3%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${4%+CURRENT.CreateVar( "}$4${4%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${5%+CURRENT.CreateVar( "}$5${5%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${6%+CURRENT.CreateVar( "}$6${6%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${7%+CURRENT.CreateVar( "}$7${7%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
  ${8%+CURRENT.CreateVar( "}$8${8%+", cvtdii("DB_Acoll::var_types:typeDatetime"), "<null>" );}
#}

;================================================================
;                Конвееpы общего назначения
;================================================================
; установка в текущей коллекции (CURRENT) атрибутов из списка
; @_list объекта @_obj в значения по-умолчанию
;--------------------------------------------------
char ObjDefault=\
#{
  $CHAR(_coll)
  _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
  @_coll.ClearNames();
  @_coll.AddListOfNames(@@_list);
  @_obj.DoDefaultForColl(@@_coll);
  CURRENT.CopyTree(@@_coll);
#}

;--------------------------------------------------
; чтение в текущую коллекцию (CURRENT) атрибутов из списка @_list
; из объекта @_obj (ключи находятся в текущей коллекции)
; вых: <return> - 0: Ok, 1: запись не найдена
; равносильно:
;   $CHAR(_sub) _sub="<null>";
;   call( "4glgpf:::SubobjRetrieve" );
;--------------------------------------------------
char ObjRetrieve_parms=_obj,_list
char ObjRetrieve=\
#{
  local("_coll");
  _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
  @_coll.ClearNames();
  @_coll.AddListOfNames(@@_list);
  @_obj.KeysFromCollection(CURRENT.get_name());
  @_obj.DoSelectForColl(@@_coll)==1?
    return(1): 0;
  CURRENT.CopyTree(@@_coll);
  return(0);
#}
char ObjRetrieve_ERR=

;--------------------------------------------------
; чтение в подколлекцию @_sub текущей коллекции (CURRENT) атрибутов
; из списка @_list из объекта @_obj (ключи находятся в текущей коллекции)
; вых: <return> - 0: Ok, 1: запись или атрибуты не найдены
;--------------------------------------------------
char SubobjRetrieve=\
#{
   $CHAR(_coll)
   _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
   @_coll.ClearNames();
   @_coll.AddListOfNames(@@_list);
   @_obj.KeysFromCollection(CURRENT.get_name());
   @_obj.DoSelectForColl(@@_coll)==1? return(1): 0;
   CURRENT.CopyTreeToSubcol(@@_sub,@@_coll);
   return(0);
#}
char SubobjRetrieve_ERR=

;--------------------------------------------------
; изменить атрибуты из списка @_list в объекте @_obj
; (новые значения атрибутов из текущей коллекции CURRENT,
; ключи находятся в ней же)
; вых: <return> - 0: Ok, 1: запись не найдена
;--------------------------------------------------
char ObjUpdate=\
#{
   $CHAR(_coll)
   _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
   @_coll.ClearNames();
   CURRENT.SomeVarsToColl(@@_list,@@_coll,@@_list);
   @_obj.KeysFromCollection(CURRENT.get_name());
   @_obj.DoUpdateForColl(@@_coll)==1? return(1): 0;
   return(0);
#}
char ObjUpdate_ERR=

;--------------------------------------------------
; добавить запись с атрибутами из списка @_list в объект @_obj
; (значения атрибутов из текущей коллекции CURRENT,
; ключи будут сохранены туда же)
; вых: <return> - 0: Ok
;--------------------------------------------------
char ObjInsert=\
#{
   $CHAR(_coll)
   _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
   @_coll.ClearNames();
   CURRENT.SomeVarsToColl(@@_list,@@_coll,@@_list);
   @_obj.DoInsertForColl(@@_coll);
   @_obj.KeysToCollection(CURRENT.get_name());
   return(0);
#}
char ObjInsert_ERR=

;--------------------------------------------------
; выполнить конвееp @_pipe для каждой записи об'екта @_obj;
; @_list опpеделяет список пеpеменных, котоpые нужно считывать из об'екта
; в текущую секцию CURRENT
; вых: <return> - количество обpаботанных записей
;--------------------------------------------------
char ObjCursor=\
#{
   $CHAR(_coll)
   _coll=Auth.obj_by_name("Obj4gl_iocoll","DB_Coll");
   @_coll.AddListOfNames(@@_list);
   $LONG(_res,_found)
   _res=0;
   _found=@_obj.ToFirst();
   while("@@_found==0",ConfigGetString("$CURCFG:::ObjCursor_hnd"));
   return(@@_res);
#}
char ObjCursor_hnd=\
#{
   @_obj.DoSelectForColl(@@_coll);
   CURRENT.CopyTree(@@_coll);
   ExecutePipe(@@_pipe);
   _res=@@_res+1;
   _found=@_obj.ToNext();
#}
char ObjCursor_ERR=

;==================================================
; стандартные pipe'ы проверки дат при ручном изменении истории
; (примени только к истории типа open_day/delete_day)
;--------------------------------------------------
char HistRecCheck_parms=today
char HistRecCheck=\
#{
  @@open_day > @@today?
    RaiseError( ${errop4gl:::ERR_HistRecBadD1},
      @@open_day, date(@@today) ):
  @@delete_day < @@today?
    RaiseError( ${errop4gl:::ERR_HistRecBadD2},
      @@delete_day, date(@@today) ):
    0;
#}

;==================================================
; привести BIC в канонический вид
char BIC_ToCanonical_parms=bic
char BIC_ToCanonical=\
#{
  bic=strupr( strcompact( @@bic ));
  local("len");
  len=strlen(@@bic);
  @@len<=11? 0:
    bic=substr( @@bic, 0, len=11 );
  @@len<11? 0:
  substr( @@bic, 8, 3 )!="XXX"? 0:
    bic=substr( @@bic, 0, len=8 );
  return(@@bic);
#}

;==================================================
; получение информации о сущности
;--------------------------------------------------
[KeyDesc]
; возможно получение информации через объекты (см.
; client::ClientUsedByTpl), здесь же используется чистый SQL
; TODO обрабатывать отсутствие записи и выдавать eKernInfoNoId
; вх : ekey;
; вых: информация;
;--------------------------------------------------
; о документе
char Doc_parms=ekey
char Doc=\
#{
  $CHAR(_doc_type) $LONG(_doc_number) $DATE(_doc_op_day)
  SQL select dt.abbr,d.number,d.op_day
      into ?_doc_type,?_doc_number,?_doc_op_day
      from docs d
        join abbrs dt on dt.type=d.type
      where c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernDocInfo},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day" ));
#}
;--------------------------------------------------
; о внебалансовом документе
char WDoc_parms=ekey
char WDoc=\
#{
  $CHAR(_doc_type) $LONG(_doc_number) $DATE(_doc_op_day)
  SQL select dt.abbr,d.number,d.op_day
      into ?_doc_type,?_doc_number,?_doc_op_day
      from wdocs d
        join abbrs dt on dt.type=d.type
      where c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernDocInfo},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day" ));
#}
;--------------------------------------------------
; о документе в картотеке
char FileDocShort_parms=ekey
char FileDocShort=\
#{
  $CHAR(_doc_type)
  $LONG(_doc_number)
  $DATE(_doc_op_day)
  $DATE(_open_day)
  SQL select dt.abbr,d.number,d.op_day,fd.open_day
      into ?_doc_type,?_doc_number,?_doc_op_day,?_open_day
      from file_docs_ fd
        join docs d on d.c_doc=fd.c_doc
        join abbrs dt on dt.type=d.type
      where fd.c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernFileDocInfoShort},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day"+
    "|o:"+(@@_open_day==@@_doc_op_day? "": "@_open_day") ));
#}
;--------------------------------------------------
; о документе в реестре, ожидающих акцепта
char AcptlDoc_parms=ekey
char AcptlDoc=\
#{
  $CHAR(_doc_type)
  $LONG(_doc_number)
  $DATE(_doc_op_day)
  $CHAR(_acptl_name)
  $DATE(_acpt_date)
  SQL select dt.abbr,d.number,d.op_day,ald.name,al.acpt_date
      into ?_doc_type,?_doc_number,?_doc_op_day,?_acptl_name,?_acpt_date
      from acptl_docs al
        join docs d on d.c_doc=al.c_doc
        join abbrs dt on dt.type=d.type
        left join acceptance_list_def ald on ald.c_acptl=al.c_acptl
      where al.c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernAcptlDocInfo},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day"+
    "|l:"+@@_acptl_name+
    "|a:@_acpt_date" ));
#}
char AcptlDocShort_parms=ekey
char AcptlDocShort=\
#{
  $CHAR(_doc_type)
  $LONG(_doc_number)
  $DATE(_doc_op_day)
  $DATE(_acpt_date)
  SQL select dt.abbr,d.number,d.op_day,al.acpt_date
      into ?_doc_type,?_doc_number,?_doc_op_day,?_acpt_date
      from acptl_docs al
        join docs d on d.c_doc=al.c_doc
        join abbrs dt on dt.type=d.type
      where al.c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernAcptlDocInfoShort},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day"+
    "|a:@_acpt_date" ));
#}
;--------------------------------------------------
; о документе в реестре расчётов дебеторов
char DeblDocShort_parms=ekey
char DeblDocShort=\
#{
  $CHAR(_doc_type)
  $LONG(_doc_number)
  $DATE(_doc_op_day)
  $DATE(_open_day)
  SQL select dt.abbr,d.number,d.op_day,dl.open_day
      into ?_doc_type,?_doc_number,?_doc_op_day,?_open_day
      from debl_docs dl
        join docs d on d.c_doc=dl.c_doc
        join abbrs dt on dt.type=d.type
      where dl.c_doc=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernDeblDocInfoShort},
    "|t:@_doc_type"+
    "|n:@_doc_number"+
    "|d:@_doc_op_day"+
    "|o:"+(@@_open_day==@@_doc_op_day? "": "@_open_day") ));
#}
;--------------------------------------------------
; о счете
char Accnt_parms=ekey
char Accnt=\
#{
  $CHAR(_accnt_curracc)
  SQL select ncurracc
      into ?_accnt_curracc
      from accnts_def
      where c_accnt=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernAccntInfo},
    "|c:@_accnt_curracc" ));
#}
;--------------------------------------------------
; о внебалансовом счете
char WAccnt_parms=ekey
char WAccnt=\
#{
  $CHAR(_accnt_curracc)
  SQL select ncurracc
      into ?_accnt_curracc
      from waccnts
      where c_accnt=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernAccntInfo},
    "|c:@_accnt_curracc" ));
#}
;--------------------------------------------------
; об счете/валюте
char AccntCurr_parms=ekey,ekey2,eday
char AccntCurr=\
#{
  $CHAR(_ac_curracc)
  $CHAR(_ac_curr)
  $DATE(_ac_delete_day)
  SQL select ad.ncurracc,ci.abbr,am.delete_day
      into ?_ac_curracc,?_ac_curr,?_ac_delete_day
      from accnts_multi am
        left join accnts_def ad on ad.c_accnt=am.c_accnt
        left join curr_info ci on ci.c_curr=am.c_curr
      where am.c_accnt=@ekey and am.c_curr=@ekey2 and
        '@eday' between am.open_day and am.delete_day;
  return(KernFormatHelp( ${errkern1:::eKernAccntCurrDayInfo},
    "|c:@_ac_curracc"+
    "|a:@_ac_curr"+
    "|d:"+(@@_ac_delete_day==${:::DayMax}? "":
      string(@@_ac_delete_day)) ));
#}
;--------------------------------------------------
; о клиенте
char Client_parms=ekey
char Client=\
#{
  $CHAR(_shname)
  $LONG(_client_code)
  SQL select shname,code
      into ?_shname,?_client_code
      from clients_def
      where c_client=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernClientInfo},
    "|s:"+@@_shname+
    "|c:@_client_code" ));
#}
;--------------------------------------------------
; об о/п
char Exch_parms=ekey
char Exch=\
#{
  $CHAR(_name,_shname)
  SQL select name,shname
      into ?_name,?_shname
      from exchs_def
      where c_exch=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchInfo},
    "|n:"+@@_name+
    "|s:"+@@_shname ));
#}
;--------------------------------------------------
; о регистрации кассира на внутреннем о/п
char Exchin_parms=ekey
char Exchin=\
#{
  $DATE(_turn_day)
  $CHAR(_user_name)
  $CHAR(_shname)
  $CHAR(_ses_desc)
  SQL select d.turn_day,u.name,ed.shname,d.ses_desc
      into ?_turn_day,?_user_name,?_shname,?_ses_desc
      from exchin_def d
        left join users u on u.c_user=d.c_cashier
        left join exchs_def ed on ed.c_exch=d.c_exch
      where d.c_exchin=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchinInfo},
    "|d:@_turn_day"+
    "|u:"+@@_user_name+
    "|e:"+@@_shname+
    "|o:"+@@_ses_desc ));
#}
char ExchinShort_parms=ekey
char ExchinShort=\
#{
  $DATE(_turn_day)
  $CHAR(_user_name)
  $CHAR(_ses_desc)
  SQL select d.turn_day,u.name,d.ses_desc
      into ?_turn_day,?_user_name,?_ses_desc
      from exchin_def d
        left join users u on u.c_user=d.c_cashier
      where d.c_exchin=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchinInfoShort},
    "|d:@_turn_day"+
    "|u:"+@@_user_name+
    "|o:"+@@_ses_desc ));
#}
;--------------------------------------------------
; о реестре о/п
char Exchrate_parms=ekey
char Exchrate=\
#{
  $CHAR(_shname)
  $DATE(_turn_day)
  $CHAR(_user_name)
  $CHAR(_ses_desc)
  $LONG(_rate_no)
  SQL select ed.shname,d.turn_day,u.name,d.ses_desc,rd.rate_no
      into ?_shname,?_turn_day,?_user_name,?_ses_desc,?_rate_no
      from exchinn_rates_def rd
        left join exchin_def d on d.c_exchin=rd.c_exchin
        left join exchs_def ed on ed.c_exch=d.c_exch
        left join users u on u.c_user=d.c_cashier
      where rd.c_exchrate=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernExchrateInfo},
    "|r:@_rate_no"+
    "|e:"+@@_shname+
    "|d:@_turn_day"+
    "|u:"+@@_user_name+
    "|o:"+@@_ses_desc ));
#}
char ExchrateShort_parms=ekey
char ExchrateShort=\
#{
  $DATE(_turn_day)
  $CHAR(_ses_desc)
  $LONG(_rate_no)
  SQL select d.turn_day,d.ses_desc,rd.rate_no
      into ?_turn_day,?_ses_desc,?_rate_no
      from exchinn_rates_def rd
        left join exchin_def d on d.c_exchin=rd.c_exchin
      where rd.c_exchrate=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernExchrateInfoShort},
    "|r:@_rate_no"+
    "|d:@_turn_day"+
    "|o:"+@@_ses_desc ));
#}
;--------------------------------------------------
; об операции о/п
char Exchop_parms=ekey
char Exchop=\
#{
  $LONG(_c_exchrate)
  $LONG(_exchop_op_no)
  $DTIME(_exchop_op_time)
  $LONG(_exchop_c_doc)
  SQL select o.c_exchrate,o.op_no,o.op_time,o.c_doc
      into ?_c_exchrate,?_exchop_op_no,?_exchop_op_time,?_exchop_c_doc
      from exchinn_ops o
      where o.c_exchop=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchopInfo},
    "|r:"+call("$CURCFG::KeyDesc:ExchrateShort", @@_c_exchrate )+
    "|o:@_exchop_op_no"+
    "|t:"+dttofmtasc(@@_exchop_op_time,"%H:%M:%S")+
    "|c:"+( @@_exchop_c_doc==0? "":
      call("$CURCFG::KeyDesc:Doc", @@_exchop_c_doc )) ));
#}
char ExchopShort_parms=ekey
char ExchopShort=\
#{
  $LONG(_exchop_op_no)
  $DTIME(_exchop_op_time)
  SQL select o.op_no,o.op_time
      into ?_exchop_op_no,?_exchop_op_time
      from exchinn_ops o
      where o.c_exchop=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchopInfoShort},
    "|o:@_exchop_op_no"+
    "|t:"+dttofmtasc(@@_exchop_op_time,"%H:%M:%S") ));
#}
;--------------------------------------------------
; о коде операции о/п
char ExchCode_parms=ekey
char ExchCode=\
#{
  $CHAR(_abbr,_name)
  SQL select abbr,name
      into ?_abbr,?_name
      from exchinn_codes
      where c_exchcode=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernExchCodeInfo},
    "|a:@_abbr"+
    "|n:"+@@_name);
#}
;--------------------------------------------------
; об оборотах о/п
char Exchtu_parms=ekey
char Exchtu=\
#{
  $CHAR(_shname)
  $DATE(_turn_day)
  $CHAR(_user_name)
  $CHAR(_ses_desc)
  $CHAR(_type_name)
  SQL select ed.shname,etd.turn_day,etd.cashier,etd.ses_desc,ta.name
      into ?_shname,?_turn_day,?_user_name,?_ses_desc,?_type_name
      from exchtu_def etd
        left join exchs_def ed on ed.c_exch=etd.c_exch
        join abbrs ta on ta.type=etd.type
      where etd.c_exchtu=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernExchtuInfo},
    "|t:"+@@_type_name+
    "|e:"+@@_shname+
    "|d:@_turn_day"+
    "|u:"+@@_user_name+
    "|o:"+@@_ses_desc));
#}
;--------------------------------------------------
; о валюте
char Curr_parms=ekey
char Curr=\
#{
  $CHAR(_abbr,_name,_curr_okw)
  SQL select abbr,name,curr_okw
      into ?_abbr,?_name,?_curr_okw
      from curr_info
      where c_curr=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernCurrInfo},
    "|a:@_abbr"+
    "|n:"+@@_name+
    "|k:@_curr_okw" ));
#}
;--------------------------------------------------
; о картотеке
char File_parms=ekey
char File=\
#{
  $CHAR(_shname)
  SQL select shname
      into ?_shname
      from file_def
      where c_file=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernFileInfo},
    "|s:"+@@_shname ));
#}
char FileFull_parms=ekey
char FileFull=\
#{
  $CHAR(_shname)
  $DATE(_open_day)
  SQL select shname,open_day
      into ?_shname,?_open_day
      from file_def
      where c_file=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernFileInfoFull},
    "|s:"+@@_shname+
    "|o:@_open_day" ));
#}
;--------------------------------------------------
; о группе
char Group_parms=ekey
char Group=\
#{
  $CHAR(_name,_shname)
  SQL select name,shname
      into ?_name,?_shname
      from groups
      where c_group=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernGroupInfo},
    "|n:"+@@_name+
    "|s:"+@@_shname ));
#}
;--------------------------------------------------
; о пользователе
char User_parms=ekey
char User=\
#{
  $CHAR(_name,_shname)
  SQL select name,shname
      into ?_name,?_shname
      from users
      where c_user=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernUserInfo},
    "|n:"+@@_name+
    "|s:@_shname" ));
#}
;--------------------------------------------------
; об отделении
char Depart_parms=ekey
char Depart=\
#{
  $CHAR(_name,_shname)
  SQL select name,shname
      into ?_name,?_shname
      from departs
      where c_dep=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernDepartInfo},
    "|n:"+@@_name+
    "|s:"+@@_shname ));
#}
;--------------------------------------------------
; о сотруднике кассы (об отделении)
char DepartCashDepUser_parms=ekey
char DepartCashDepUser=\
#{
  $CHAR(_type)
  $CHAR(_name,_shname)
  $DATE(_open_day,_delete_day)
  SQL select t.name,dd.name,dd.shname,dcu.open_day,dcu.delete_day
      into ?_type,?_name,?_shname,?_open_day,?_delete_day
      from departs_cash_users dcu
        left join departs dd on dd.c_dep=dcu.c_dep
        join abbrs t on t.type=dcu.type
      where dcu.c_dcuser=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernDepartCashUserDepInfo},
    "|t:@_type"+
    "|n:"+@@_name+
    "|s:"+@@_shname+
    "|o:@_open_day"+
    "|d:"+(@@_delete_day==${:::DayMax}? "": string(@@_delete_day)) ));
#}
;--------------------------------------------------
; о сотруднике кассы (о пользователе)
char DepartCashUserUser_parms=ekey
char DepartCashUserUser=\
#{
  $CHAR(_type)
  $CHAR(_name,_shname)
  $DATE(_open_day,_delete_day)
  SQL select t.name,u.name,u.shname,dcu.open_day,dcu.delete_day
      into ?_type,?_name,?_shname,?_open_day,?_delete_day
      from departs_cash_users dcu
        join abbrs t on t.type=dcu.type
        left join users u on u.c_user=dcu.c_user
      where dcu.c_dcuser=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernDepartCashUserUserInfo},
    "|t:@_type"+
    "|n:"+@@_name+
    "|s:@_shname"+
    "|o:@_open_day"+
    "|d:"+(@@_delete_day==${:::DayMax}? "": string(@@_delete_day)) ));
#}
;--------------------------------------------------
; об учредительном органе клиента
char ClientBody_parms=ekey,ekey2
char ClientBody=\
#{
  $CHAR(_name2,_shname)
  $LONG(_client_code)
  SQL select cld.shname,cld.code
      into ?_shname,?_client_code
      from clients_def cld
      where cld.c_client=@ekey;
  SQL select cbd.name
      into ?_name2
      from client_bodies_def cbd
      where cbd.c_clbody=@ekey2;
  return(KernFormatHelp( ${errkern1:::eKernClientBodyInfo},
    "|b:"+@@_name2+
    "|c:"+@@_shname+
    "|u:@_client_code" ));
#}
;--------------------------------------------------
; об учредителе/участнике клиента
char ClientSharer_parms=ekey,eday
char ClientSharer=\
#{
  $CHAR(_name,_name2,_shname)
  $LONG(_client_code)
  SQL select cs.name,cbd.name,cld.shname,cld.code
      into ?_name,?_name2,?_shname,?_client_code
      from clients_sharers cs
        left join client_bodies_def cbd on cbd.c_clbody=cs.c_clbody
        left join clients_def cld on cld.c_client=cs.c_client
      where cs.c_clshr=@ekey and
        '@eday' between cs.prev_change and cs.next_change;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernClientSharerInfo},
    "|n:"+@@_name+
    "|b:"+@@_name2+
    "|c:"+@@_shname+
    "|u:@_client_code" ));
#}
;--------------------------------------------------
; о внебалансовом счете 2го порядка
char WNplAccnt_parms=ekey
char WNplAccnt=\
#{
  $LONG(_naccnt)
  SQL select naccnt
      into ?_naccnt
      from wnpl_accnt
      where c_naccnt=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernWNplAccntInfo},
    "|a:@_naccnt" ));
#}
;--------------------------------------------------
; о филиале
char Branch_parms=ekey
char Branch=\
#{
  $CHAR(_shname)
  SQL select shname into ?_shname
      from branches where c_branch=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernBranchInfo},
    "|s:"+@@_shname ));
#}
;--------------------------------------------------
; о данных консолидации
char BranchData_parms=ekey
char BranchData=\
#{
  $CHAR(_name,_opt)
  SQL select name,opt into ?_name,?_opt
      from branch_data_def where c_brep=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernBranchDataInfo},
    "|n:"+@@_name+
    "|o:@_opt" ));
#}
;--------------------------------------------------
; о сокращениях
char Abbrname_parms=ekey
char Abbrname=\
#{
  $CHAR(_name)
  SQL select name into ?_name from abbrs where type=@ekey;
  return(@@_name);
#}
char Abbr_parms=ekey
char Abbr=\
#{
  $CHAR(_abbr)
  SQL select abbr into ?_abbr from abbrs where type=@ekey;
  return(@@_abbr);
#}
;--------------------------------------------------
; о типе корр.счета
char AbbrLoroNostro_parms=ekey
char AbbrLoroNostro=\
#{
; информация хранится не в таблице, а в hls
  return( KernFormatHelp(
    @@ekey==$ACCNT_TYPE_ACTIVE ? ${errkern1:::eKernAbbrInfoNostro}:
    @@ekey==$ACCNT_TYPE_PASSIVE? ${errkern1:::eKernAbbrInfoLoro}:
      ${errkern1:::eKernInfoNoId}, "" ));
#}
;--------------------------------------------------
; о договоре
char Contract_parms=ekey
char Contract=\
#{
  $CHAR(_name)
  SQL select name
      into ?_name
      from contracts
      where c_contract=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernContractInfo},
    "|n:"+@@_name ));
#}
;--------------------------------------------------
; о регистрации кассира на кассе
char ListCashier_parms=ekey
char ListCashier=\
#{
  $DATE(_op_day)
  $CHAR(_user_name)
  $CHAR(_name,_shname)
  $DATE(_ses_day)
  $CHAR(_no)
  SQL select cs.op_day,u.name,dd.name,dd.shname,cs.ses_day,cs.no
      into ?_op_day,?_user_name,?_name,?_shname,?_ses_day,?_no
      from list_cashier_def lcd
        join cash_sessions cs on cs.c_cses=lcd.c_cses
        left join users u on u.c_user=lcd.c_cashier
        left join departs dd on dd.c_dep=cs.c_dep
      where lcd.c_lcashier=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernListCashierInfo},
    "|d:@_op_day"+
    "|u:"+@@_user_name+
    "|s:"+@@_shname+
    "|n:"+@@_name+
;   реализация синонима short_ses_desc
    "|o:"+(@@_ses_day==@@_op_day && @@_no==0? "":
      rfmtdate(@@_ses_day,"ddmm")+
      (@@_no==0? "": "-"+rfmtdec(@@_no,"&"))) ));
#}
char ListCashierShort_parms=ekey
char ListCashierShort=\
#{
  $DATE(_op_day)
  $CHAR(_user_name)
  $DATE(_ses_day)
  $CHAR(_no)
  SQL select cs.op_day,u.name,cs.ses_day,cs.no
      into ?_op_day,?_user_name,?_ses_day,?_no
      from list_cashier_def lcd
        join cash_sessions cs on cs.c_cses=lcd.c_cses
        left join users u on u.c_user=lcd.c_cashier
      where lcd.c_lcashier=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernListCashierInfoShort},
    "|d:@_op_day"+
    "|u:"+@@_user_name+
;   реализация синонима short_ses_desc
    "|o:"+(@@_ses_day==@@_op_day && @@_no==0? "":
      rfmtdate(@@_ses_day,"ddmm")+
      (@@_no==0? "": "-"+rfmtdec(@@_no,"&"))) ));
#}
;--------------------------------------------------
; о регистрации кассира по валюте (пока не используется, копия из
; kernel'а)
char ListCashierCurr_parms=ekey,ekey2
char ListCashierCurr=\
#{
  $CHAR(_curr_abbr)
  $CHAR(_accnt_curracc)
  SQL select ci.abbr,ad.ncurracc
      into ?_curr_abbr,?_accnt_curracc
      from list_cashier_new lc
        left join curr_info ci on ci.c_curr=lc.c_curr
        left join accnts_def ad on ad.c_accnt=lc.c_accnt_new
      where lc.c_lcashier=@ekey and lc.c_curr=@ekey2;
  return(KernFormatHelp( ${errkern1:::eKernListCashierCurrInfo},
    "|l:"+call("$CURCFG::KeyDesc:ListCashier")+
    "|c:@_curr_abbr"+
    "|a:@_accnt_curracc" ));
#}
;--------------------------------------------------
; о кассовой смене
char CashSession_parms=ekey
char CashSession=\
#{
  $DATE(_op_day,_ses_day)
  $CHAR(_name,_shname)
  $CHAR(_no)
  SQL select cs.op_day,dd.name,dd.shname,cs.ses_day,cs.no
      into ?_op_day,?_name,?_shname,?_ses_day,?_no
      from cash_sessions cs
        left join departs dd on dd.c_dep=cs.c_dep
      where cs.c_cses=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernCashSessionInfo},
    "|d:@_op_day"+
    "|n:"+@@_name+
    "|s:"+@@_shname+
;   реализация синонима full_ses_desc
    "|o:"+(rfmtdate(@@_ses_day,"ddmm")+
      (@@_no==0? "": "-"+rfmtdec(@@_no,"&"))) ));
#}
;--------------------------------------------------
; электронное сообщение из/в ФНС
char UNMsg_parms=ekey
char UNMsg=\
#{
  $CHAR(_unmsg_type)
  $LONG(_unmsg_nom)
  $DATE(_unmsg_data)
  $CHAR(_unmsg_nalog_kod)
  SQL select ut.abbr,ud.nom,ud.data,
        case
        when ud.type in(
            $UNMSG_TYPE_RPO,$UNMSG_TYPE_RBN,$UNMSG_TYPE_ROO,
            $UNMSG_TYPE_ZNON,$UNMSG_TYPE_ZNOO,$UNMSG_TYPE_ZNOV,
            $UNMSG_TYPE_SBC01,$UNMSG_TYPE_SBC02,$UNMSG_TYPE_SBC03,
            $UNMSG_TYPE_SBC21,$UNMSG_TYPE_SBC22,$UNMSG_TYPE_SBC23)
          then nor.kod
        when ud.type in($UNMSG_TYPE_BOS,$UNMSG_TYPE_BNS,$UNMSG_TYPE_BV)
          then onor.kod
        end
      into ?_unmsg_type,?_unmsg_nom,?_unmsg_data,
        ?_unmsg_nalog_kod
      from unmsg_def ud
        join abbrs ut on ut.type=ud.type
        left join unmsg_nalog_org nor on nor.c_unmsg=ud.c_unmsg
        left join unmsg_otvet o on o.c_unmsg=ud.c_unmsg
        left join unmsg_nalog_org onor on onor.c_unmsg=o.c_unmsg_orig
      where ud.c_unmsg=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernUNMsgInfo},
    "|t:@_unmsg_type"+
    "|n:@_unmsg_nom"+
    "|d:@_unmsg_data"+
    "|k:"+@@_unmsg_nalog_kod ));
#}
char UNMsgOpDay_parms=ekey
char UNMsgOpDay=\
#{
  $CHAR(_unmsg_type)
  $LONG(_unmsg_nom)
  $DATE(_unmsg_data,_unmsg_op_day)
  $CHAR(_unmsg_nalog_kod)
  SQL select ut.abbr,ud.nom,ud.data,ud.op_day,
        case
        when ud.type in(
            $UNMSG_TYPE_RPO,$UNMSG_TYPE_RBN,$UNMSG_TYPE_ROO,
            $UNMSG_TYPE_ZNON,$UNMSG_TYPE_ZNOO,$UNMSG_TYPE_ZNOV,
            $UNMSG_TYPE_SBC01,$UNMSG_TYPE_SBC02,$UNMSG_TYPE_SBC03,
            $UNMSG_TYPE_SBC21,$UNMSG_TYPE_SBC22,$UNMSG_TYPE_SBC23)
          then nor.kod
        when ud.type in($UNMSG_TYPE_BOS,$UNMSG_TYPE_BNS,$UNMSG_TYPE_BV)
          then onor.kod
        end
      into ?_unmsg_type,?_unmsg_nom,?_unmsg_data,?_unmsg_op_day,
        ?_unmsg_nalog_kod
      from unmsg_def ud
        join abbrs ut on ut.type=ud.type
        left join unmsg_nalog_org nor on nor.c_unmsg=ud.c_unmsg
        left join unmsg_otvet o on o.c_unmsg=ud.c_unmsg
        left join unmsg_nalog_org onor on onor.c_unmsg=o.c_unmsg_orig
      where ud.c_unmsg=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernUNMsgOpDayInfo},
    "|t:@_unmsg_type"+
    "|n:@_unmsg_nom"+
    "|d:@_unmsg_data"+
    "|k:"+@@_unmsg_nalog_kod+
    "|o:"+(@@_unmsg_op_day==@@_unmsg_data? "": "@_unmsg_op_day") ));
#}
char UNMsgOpDayState_parms=ekey
char UNMsgOpDayState=\
#{
  $CHAR(_unmsg_type)
  $LONG(_unmsg_nom)
  $DATE(_unmsg_data,_unmsg_op_day)
  $CHAR(_unmsg_nalog_kod)
  $CHAR(_unmsg_state,_unmsg_send_state)
  SQL select ut.abbr,ud.nom,ud.data,ud.op_day,
        case
        when ud.type in(
            $UNMSG_TYPE_RPO,$UNMSG_TYPE_RBN,$UNMSG_TYPE_ROO,
            $UNMSG_TYPE_ZNON,$UNMSG_TYPE_ZNOO,$UNMSG_TYPE_ZNOV,
            $UNMSG_TYPE_SBC01,$UNMSG_TYPE_SBC02,$UNMSG_TYPE_SBC03,
            $UNMSG_TYPE_SBC21,$UNMSG_TYPE_SBC22,$UNMSG_TYPE_SBC23)
          then nor.kod
        when ud.type in($UNMSG_TYPE_BOS,$UNMSG_TYPE_BNS,$UNMSG_TYPE_BV)
          then onor.kod
        end,ts.name,tss.abbr
      into ?_unmsg_type,?_unmsg_nom,?_unmsg_data,?_unmsg_op_day,
        ?_unmsg_nalog_kod,?_unmsg_state,?_unmsg_send_state
      from unmsg_def ud
        join abbrs ut on ut.type=ud.type
        left join unmsg_nalog_org nor on nor.c_unmsg=ud.c_unmsg
        left join unmsg_otvet o on o.c_unmsg=ud.c_unmsg
        left join unmsg_nalog_org onor on onor.c_unmsg=o.c_unmsg_orig
        join abbrs ts on ts.type=ud.state
        left join abbrs tss on tss.type=ud.send_state
      where ud.c_unmsg=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernUNMsgOpDayStateInfo},
    "|t:@_unmsg_type"+
    "|n:@_unmsg_nom"+
    "|d:@_unmsg_data"+
    "|k:"+@@_unmsg_nalog_kod+
    "|o:"+(@@_unmsg_op_day==@@_unmsg_data? "": "@_unmsg_op_day")+
    "|s:"+@@_unmsg_state+
    "|e:@_unmsg_send_state" ));
#}
;--------------------------------------------------
; документ SWIFT
char DocSwift_parms=ekey
char DocSwift=\
#{
  $CHAR(_docsw_type)
  $CHAR(_docsw_msg_bic)
  $CHAR(_docsw_ref)
  $DATE(_docsw_curr_day)
  SQL select dt.abbr,d.msg_bic,d.ref,d.curr_day
      into ?_docsw_type,?_docsw_msg_bic,?_docsw_ref,?_docsw_curr_day
      from docs_swift d
        join abbrs dt on dt.type=d.type
      where d.c_docsw=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernDocSwiftInfo},
    "|t:@_docsw_type"+
    "|c:"+@@_docsw_msg_bic+
    "|n:"+@@_docsw_ref+
    "|d:@_docsw_curr_day" ));
#}
;--------------------------------------------------
; выписка SWIFT
char StatSwift_parms=ekey
char StatSwift=\
#{
  $CHAR(_stsw_type)
  $CHAR(_stsw_curracc)
  $CHAR(_stsw_curr)
  $LONG(_stsw_number)
  $DATE(_stsw_date1)
  SQL select st.abbr,ad.ncurracc,ci.abbr,s.number,
        s.date1
      into ?_stsw_type,?_stsw_curracc,?_stsw_curr,?_stsw_number,
        ?_stsw_date1
      from stats_swift s
        join abbrs st on st.type=s.type
        left join accnts_def ad on ad.c_accnt=s.c_accnt
        left join curr_info ci on ci.c_curr=s.c_curr
      where s.c_stsw=@ekey;
  return(KernFormatHelp(${errkern1:::eKernStatSwiftInfo},
    "|t:@_stsw_type"+
    "|a:"+@@_stsw_curracc+
    "|c:"+@@_stsw_curr+
    "|n:"+(@@_stsw_number? string(@@_stsw_number): "")+
    "|d:"+rfmtdate(@@_stsw_date1,"dd.mm.yyyy") ));
#}
char StatLineSwift_parms=ekey
char StatLineSwift=\
#{
  $LONG(_c_stsw)
  $MONEY(_isum)
  SQL select c_stsw,isum
      into ?_c_stsw,?_isum
      from statsw_lines sl
      where sl.c_stswl=@ekey;
  return(KernFormatHelp(${errkern1:::eKernStatLineSwiftInfo},
    "|s:"+rfmtmoneyl(@@_isum)+
    "|c:"+(@@_c_stsw==0 ? "" : call("$CURCFG::KeyDesc:StatSwift", @@_c_stsw))+
    ""));
#}
;--------------------------------------------------
; электронное сообщение для РосФинМониторинга
char RFM_parms=ekey
char RFM=\
#{
  $CHAR(_rfm_id)
  SQL select rfm.id
      into ?_rfm_id
      from rfm_def rfm
      where rfm.c_rfm=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernRFM_Info},
    "|i:"+@@_rfm_id ));
#}
;--------------------------------------------------
char RestPay_parms=ekey
char RestPay=\
#{
  $CHAR(_name)
  $DATE(_op_day)
  SQL select rpd.name,rpd.op_day
      into ?_name,?_op_day
      from rest_pays_def rpd
      where rpd.c_rest_pay=@ekey;
  return(KernFormatHelp(${errkern1:::eKernRestPayInfo},
    "|n:"+@@_name+
    "|d:@_op_day ));
#}
;--------------------------------------------------
; внешний идентификатор УФЭБС
char EDRefID_parms=ekey
char EDRefID=\
#{
  return( call("$CURCFG::KeyDesc:_EDRefID",
    ${errkern1:::eKernEDRefID_Info} ));
#}
; то же самое, только другое сообщение
char EDRefID_Short_parms=ekey
char EDRefID_Short=\
#{
  return( call("$CURCFG::KeyDesc:_EDRefID",
    ${errkern1:::eKernEDRefID_InfoShort} ));
#}
char _EDRefID_parms=errcode
char _EDRefID=\
#{
  $CHAR(_ed_kind) $LONG(_edno) $DATE(_eddate) $CHAR(_edauthor)
  SQL select edk.abbr,ed.edno,ed.eddate,ed.edauthor
      into ?_ed_kind,?_edno,?_eddate,?_edauthor
      from edrefid ed
        join abbrs edk on edk.type=ed.ed_kind
      where c_edrefid=@ekey;
; получаем УИС нашего банка на дату сообщения
  $CHAR(_our_ed_uis)
  SQL select ba.mfo2[2,8]||"000"
      into ?_our_ed_uis
      from our_bank ob
        join banks_attrs ba on ba.c_bank=ob.c_bank and
          ?_eddate between ba.prev_change and ba.next_change
      where ob.c_our_bank=$OURBANK_OUR and
        ?_eddate between ob.prev_change and ob.next_change;
; сбрасываем УИС, если это наш внешний идентификатор
  @@_edauthor==@@_our_ed_uis?
    _edauthor = "": 0;
  return(KernFormatHelp( @@errcode,
    "|t:@_ed_kind"+
    "|n:@_edno"+
    "|d:@_eddate"+
    "|a:"+@@_edauthor ));
#}
;--------------------------------------------------
; код запроса/ответа ED243/244
char ED_ReqAnsCode_parms=ekey
char ED_ReqAnsCode=\
#{
  $CHAR(_code,_desc)
  SQL select code,desc
      into ?_code,?_desc
      from ed243_244_codes
      where c_code=@ekey;
  return(KernFormatHelp(${errkern1:::eKernED_ReqAnsCodeInfo},
    "|c:@_code"+
    "|n:"+@@_desc ));
#}
;--------------------------------------------------
; группа счетов
char AccGroup_parms=ekey
char AccGroup=\
#{
  $CHAR(_type,_shname)
  SQL select gt.abbr,gd.shname
      into ?_type,?_shname
      from accgroups_def gd
        join abbrs gt on gt.type=gd.type
      where gd.c_group=@ekey;
  return(KernFormatHelp(${errkern1:::eKernAccGroupInfo},
    "|t:@_type"+
    "|s:"+@@_shname ));
#}
;--------------------------------------------------
; строка оперативки
char FALine_parms=ekey
char FALine=\
#{
  $CHAR(_type,_code,_shname,_name)
  SQL select rt.abbr,fald.code,fald.shname,fald.name
      into ?_type,?_code,?_shname?_name
      from finan_lines_def fald
        join abbrs rt on rt.type=fald.rep_type
      where fald.c_faline=@ekey;
  return(KernFormatHelp(${errkern1:::eKernFALineInfo},
    "|t:@_type"+
    "|c:@_code"+
    "|s:"+@@_shname+
    "|s:"+@@_name ));
#}
;--------------------------------------------------
; доп.информация о счёте для ФНС
char AccntExtra_parms=ekey
char AccntExtra=\
#{
  $CHAR(_necurracc)
  $DATE(_open_day)
  $DATE(_delete_day)
  SQL select ae.necurracc,ae.open_day,ae.delete_day
      into ?_necurracc,?_open_day,?_delete_day
      from accnts_extra ae
      where ae.c_accntx=@ekey;
  return(KernFormatHelp( ${errkern1:::eKernAccntExtraInfo},
    "|a:"+@@_necurracc+
;   т.к. _delete_day >= _open_day, то если #o - непусто, то #c - пусто
    "|o:"+(@@_open_day>Otoday()? string(@@_open_day): "")+
;   т.к. _open_day <= _delete_day, то если #c - непусто, то #o - пусто
    "|d:"+(@@_delete_day<Otoday()? string(@@_delete_day): "") ));
#}
;--------------------------------------------------
; состояние отправки сообщений (abbrname[/abbrname])
char SendState_parms=state,send_state
char SendState=\
#{
  return( call("$CURCFG::KeyDesc:Abbrname",@@state)+
    ( @@send_state==0? "":
        "/"+call("$CURCFG::KeyDesc:Abbrname",@@send_state) ));
#}
;--------------------------------------------------
; разрешение работы с сообщениями ФНС (метка сообщения)
char UNMsgUserLabel_parms=ekey
char UNMsgUserLabel=\
#{
  $CHAR(_name)
  $DATE(_open_day,_delete_day)
  SQL select la.name,uu.open_day,uu.delete_day
      into ?_name,?_open_day,?_delete_day
      from unmsg_users uu
        join abbrs la on la.type=uu.label
      where uu.c_unuser=@ekey;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernUNMsgUserLabelInfo},
    "|n:"+@@_name+
    "|o:@_open_day"+
    "|d:"+(@@_delete_day==${:::DayMax}? "": string(@@_delete_day)) ));
#}
;--------------------------------------------------
; банк
char Bank_parms=ekey,eday
char Bank=\
#{
  $CHAR(_name,_bik,_bank_city)
  SQL select ba.name,ba.mfo2,ad.city
      into ?_name,?_bik,?_bank_city
      from banks_attrs ba
        left join address ad on ad.c_addr=ba.c_addr
      where ba.c_bank=@ekey and
        '@eday' between ba.prev_change and ba.next_change;
; допустимы пустые значения
  return(KernFormatHelp( ${errkern1:::eKernBankInfo},
    "|n:"+@@_name+
    "|b:"+@@_bik+
    "|c:"+@@_bank_city ));
#}
;--------------------------------------------------
; ###

;==================================================
; проверка существования сущности
;--------------------------------------------------
[CheckExist]
; реестр расчетов с дебиторами
char Debl_parms=pref,day1,day2
char Debl=\
#{
  @@@{pref}c_debl==0?
    RaiseError( ${errkern1:::eKernNoDebitorList} ): 0;
  @@@{pref}open_day<=@@day1? 0:
    RaiseError( ${errkern1:::eKernNoDebitorListBefore},
      @@@{pref}name, @@day1, @@@{pref}open_day );
  @@@{pref}delete_day>=@@day2? 0:
    RaiseError( ${errkern1:::eKernNoDebitorListAfter},
      @@@{pref}name, @@day2, @@@{pref}delete_day );
#}
;--------------------------------------------------
; картотека
char File_parms=pref,day1,day2
char File=\
#{
  @@@{pref}c_file==0?
    RaiseError( ${errkern1:::eKernNoFile} ): 0;
  @@@{pref}open_day<=@@day1? 0:
    RaiseError( ${errkern1:::eKernNoFileBefore},
      @@@{pref}shname, @@day1, @@@{pref}open_day );
  @@@{pref}delete_day>=@@day2? 0:
    RaiseError( ${errkern1:::eKernNoFileAfter},
      @@@{pref}shname, @@day2, @@@{pref}delete_day );
#}
;--------------------------------------------------
; реестр документов, ожидающих акцепта
char Acptl_parms=pref,day1,day2
char Acptl=\
#{
  @@@{pref}c_acptl==0?
    RaiseError( ${errop4gl:::ERR_NoAcptl} ): 0;
  @@@{pref}open_day<=@@day1? 0:
    RaiseError( ${errop4gl:::ERR_AcptlNoBefore},
      @@@{pref}name, @@day1, @@@{pref}open_day );
  @@@{pref}delete_day>=@@day2? 0:
    RaiseError( ${errop4gl:::ERR_AcptlNoAfter},
      @@@{pref}name, @@day2, @@@{pref}delete_day );
#}
;--------------------------------------------------
; обычный 4-ёхзначный внебалансовый счёт (валюта и рубли)
; вх: pref - ссылка на подобъект без истории;
;     c_curr - проверяемая валюта;
char WAccntCBank4_parms=pref,c_curr,day1,day2
char WAccntCBank4=\
#{
  @@@{pref}c_accnt==0?
    RaiseError( ${errop4gl:::ERR_WAccntNoAccntCode} ): 0;
  KernCheckWAccntRange( @@day1, @@day2,
    @@@{pref}open_day, @@@{pref}delete_day,
    @@@{pref}ncurracc );
  @@@{pref}rate_kind==$WRATE_CBANK4? 0:
    RaiseError( ${errop4gl:::ERR_WAccntIllegalRateKind},
      call("4glgpf::KeyDesc:Abbrname",@@@{pref}rate_kind),
      call("4glgpf::KeyDesc:Abbrname",$WRATE_CBANK4) );
  KernCheckWAccntCurrOnlyRange( @@day1, @@day2,
    @@@{pref}c_accnt, @@c_curr,
    @@@{pref}ncurracc );
#}
; сокращенная версия (без проверки существования счёта)
char WAccntCurrCBank4_parms=pref,c_curr,day1,day2
char WAccntCurrCBank4=\
#{
  @@@{pref}rate_kind==$WRATE_CBANK4? 0:
    RaiseError( ${errop4gl:::ERR_WAccntIllegalRateKind},
      call("4glgpf::KeyDesc:Abbrname",@@@{pref}rate_kind),
      call("4glgpf::KeyDesc:Abbrname",$WRATE_CBANK4) );
  KernCheckWAccntCurrOnlyRange( @@day1, @@day2,
    @@@{pref}c_accnt, @@c_curr,
    @@@{pref}ncurracc );
#}

;==================================================
; Стандартные наборы акций
;--------------------------------------------------
[std_add_acts]
; стандартные акции для объектов над Cfgcur
; параметр - вызов special/subobj после ввода
template char cfgcur=\
#{
  *(edit,dispatch): SED_INIT
  {
    pipe="setmode{mode=edit};
          doopn{opn=first};
    	  doopn{opn=default};
          to_first_field"
  };
  *(edit,dispatch,"Выполнить#P-"): LFENTER
  {
    pipe="vldopn{opn=update};
          doopn{opn=update};
          doopn{opn=read};
          $1
          to_first_field"
  };
  *(edit,dispatch,"Заново#hЗаново#w0#P1"): PGDN
  {
    pipe="doopn{opn=default};
          clear_chgflag;
          to_first_field"
  };
  *(edit,exit,"Выход#hВыход#w9#P1"): ESC;
#}
;--------------------------------------------------
; набор акций с промежуточным режимом после вставки (view3), в котором
; можно только просматривать, для правки только что заведенной записи
; требуется нажать специальную клавишу (PGUP). В этом режиме также можно
; удалять, вызывать special'ы (_spc_codes), переходить к вводу новой
; записи.
; TODO заменить docmng::acts:std2 на этот набор
char doc_like=\
#{
  *(add/insert,dispatch,"Вставка#P-"): LFENTER
  { pipe=
      vldopn{opn=std};
      doopn{opn=insert};
      setmode{mode=view3};
      doopn{opn=read};
      calc{expr='@THIS.get_string_resource("_spc_codes","codes")==0? 0:
        codes=""'};
      switch{var=codes,empty=continue,default=
        dospc{for=current,codes=%codes,reread=y}
      };
      to_first_field
  };
  -(add):F4;
  *(view3/insert,dispatch,
    "Перейти в режим добавления#hЗаново#w0#P3"): PGDN
  { pipe=
      setmode{mode=add};
      doopn{opn=default};
      enter_line;
      to_first_field
  };
  *(view3/update,dispatch,
    "Перейти в режим редактирования#hПравить#w1#P3"): PGUP
  { pipe=
      setmode{mode=edit};
      enter_line
  };
  *(view3/delete,dispatch,
    "Удалить текущую запись#hУдалить#w2#P2"): F4
  { pipe=
      calc{expr='@THIS.get_long_resource("_msg_ask_delete","code")==0?0:
        code=${formmsg:::msgAskDelete}'};
      message{code=%code,place=ask};
      leave_line;
      doopn{opn=delete};
;     переходим в режим вставки
      setmode{mode=add};
      doopn{opn=default};
      enter_line;
      to_first_field
  };
#}
; вызов special'ов по F8 из промежуточного режима после вставки
char doc_like_spc=\
#{
  *(view3,dispatch,"Обработать#hОбработать#w*#P2"): F8
  { pipe=
;     выполняем special'ы
      calc{expr='@THIS.get_string_resource("_spc_codes","codes")==0? 0:
        codes=""'};
      dospc{for=current,codes=%codes,reread=y}
  };
#}
;--------------------------------------------------
; установка режима в зависимости от состояния
; - переменная state должна быть на экране
; - long-синоним state_mode вычисляется на основе state
; - значение 1 означает режим редактирования
char state_init=\
#{
  getvars{vars='state'};
  calc{expr='CURRENT.PrepareVars("state_mode")'};
  switch{var=state_mode,
    1=setmode{mode=edit},
    default=setmode{mode=view}
  };
#}
; вызов special'ов по F8 и установка режима в зависимости от состояния
char state_spc=\
#{
  *(edit|view,dispatch,"Обработать#hОбработать#w*#P2"): F8
  { pipe=
;     предупреждаем об изменениях
      control{pipe=!get_chgflag,break=
        message{code=${errop4gl:::MSG_RecChanged},place=!ask}
      };
;     выполняем special'ы
      calc{expr='@THIS.get_string_resource("_spc_codes","codes")==0? 0:
        codes=""'};
      dospc{for=current,codes=%codes,reread=y};
;     устанавливаем режим в зависимости от состояния
      dispatch{pipe=*$CURCFG::$CURSEC:state_init};
  };
#}
;--------------------------------------------------
; редактирование одного документа
char doc1_like=\
#{
  *(edit,dispatch,"Изменение#P-"): LFENTER
  { pipe=
      control{pipe=get_chgflag,
        break=continue,
        continue=
          vldopn{opn=std};
          doopn{opn=update};
          doopn{opn=read};
          clear_chgflag
      };
      dispatch{pipe=*$CURCFG::$CURSEC:doc1_dospc}
  };
  *(edit,dispatch,"Обработать#hОбработать#w*#P2"): F8
  { pipe=*$CURCFG::$CURSEC:doc1_dospc };
  *(edit,dispatch,"Удалить#hУдалить#w=7#P3"): F4
  { pipe=
      calc{expr='@THIS.get_long_resource("_msg_ask_delete","code")==0?0:
        code=${formmsg:::msgAskDelete}'};
      message{code=%code,place=ask};
      leave_line;
      doopn{opn=delete};
      quit
  };
#}
char doc1_dospc=\
#{
; сначала проверяем нет ли акции для выполнения special'ов
  calc{expr='@THIS.get_string_resource("_dospc","dospc")==0? 0:
    dospc=""'};
  switch{var=dospc,
;   если нет, то проверяем определен ли список special'ов
    empty=
      calc{expr='@THIS.get_string_resource("_spc_codes","codes")==0? 0:
        codes=""'};
      dospc{for=current,codes=%codes},
    default=%dospc
  };
  quit
#}
;--------------------------------------------------
; изменение состояния документов
; subobj - имя объекта производного от Conf для просмотра
template char conf=\
#{
  *(any,subobj,"Смотpеть документ#hДокумент#w:0#P2"):CTRL_V
    {${subobj%+subobj=}$subobj${subobj%+,}keyform=ViewDocForm};
  *(any,subobj,"Смотpеть проводки#hПроводки#w:1#P2"):CTRL_P
    {${subobj%+subobj=}$subobj${subobj%+,}visual=DocProvsEdt};
  *(any,subobj,"Посмотреть зависимые#hЗависимые#w:3#P2"):CTRL_S
    {subobj=$subobj${subobj%+.}ChainDown,keyform=Conf_bob};
  *(any,subobj,"Посмотреть основной#hОсновной#w:4#P2"):CTRL_B
    {subobj=$subobj${subobj%+.}ChainUp,keyform=Conf_bob};
  *(any,subobj,"Посмотреть внебалансовый#hВнебалансовый#w:5#P2"):CTRL_W
    {subobj=$subobj${subobj%+.}WChain,keyform=wbal::WConf_bob};
#}

;==================================================
; Превращение объекта в read-only
;--------------------------------------------------
; секция, из которой копируем, должна быть определена в переменной _src
template [RO_tpl1]
char ks_table=$${$_src:ks_table}
char ks_keys=$${$_src:ks_keys}
char ks_order=$${$_src:ks_order}
char ks_defaults=$${$_src:ks_defaults}
char ks_where=$${$_src:ks_where}
char foreigns=$${$_src:foreigns}
char lookups=$${$_src:lookups}
char slaves=$${$_src:slaves}
char extents=$${$_src:extents}
char builtins=$${$_src:builtins}
char masters=$${$_src:masters}
char references=$${$_src:references}
char slave_refs=$${$_src:slave_refs}
char outer_slaves=$${$_src:outer_slaves}
char outer_masters=$${$_src:outer_masters}
char refs_x1=$${$_src:refs_x1}
char slave_refs_x1=$${$_src:slave_refs_x1}
char filter_fields=$${$_src:filter_fields}
char synonyms=$${$_src:synonyms}
;--------------------------------------------------
template [RO_tpl2]
const char main_class=DB_Kstat
const char read_access=any
const char insert_access=
const char update_access=
const char delete_access=
const char ks_table=${.:ks_table}()
char ks_keys=${.:ks_keys}()
char ks_order=${.:ks_order}()
char ks_defaults=${.:ks_defaults}()
char ks_where=${.:ks_where}()
char foreigns=\
#{""
  ${.:foreigns}()
  ${.:slaves}()
  ${.:extents}()
  ${.:builtins}()
  ${.:masters}()
#}
char lookups=${.:lookups}()
char references=${.:references}()${.:slave_refs}()
char outer_slaves=${.:outer_slaves}()
char outer_masters=${.:outer_masters}()
char refs_x1=${.:refs_x1}()${.:slave_refs_x1}()
char filter_fields=${.:filter_fields}()
char synonyms=${.:synonyms}()
;--------------------------------------------------
template [RO_tpl3]
char slaves=
char extents=
char builtins=
char masters=
char slave_refs=
char slave_refs_x1=
;--------------------------------------------------
template [TruncAll_tpl]
_src=${CURSEC%>All}
;--------------------------------------------------
template [TruncDay_tpl]
_src=${CURSEC%>Day}
char pseudo_keys=
;--------------------------------------------------
template [TruncLast_tpl]
_src=${CURSEC%>Last}

;--------------------------------------------------
; пример использования
; [NCLientCommon]
; ...
; [NClientCommonAll] default: 4glgpf::TruncAll_tpl,4glgpf::RO_tpl1,4glgpf::RO_tpl2,4glgpf::RO_tpl3
