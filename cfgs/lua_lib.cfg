log_file = nil
write_log = function(str)
   if not log_file then log_file = assert(io.open("lua.log", "w")) end
   log_file:write(str)
   log_file:flush()
end
local _discf = function(rate, pmts, dates)
   local dcf, dcfprime = {}, {}

   local sum_list = function(list)
      local sum = 0
      for _, item in ipairs(list) do sum = sum + item end
      return sum
   end

   for i, cf in ipairs(pmts) do
      local d = dates[i] - dates[1]
      table.insert(dcf, (cf*(1 + rate)^(-d/365.)))
      table.insert(dcfprime, ((-d/365.)*cf*(1 + rate)^(-d/365. - 1)))
   end

   return sum_list(dcf), sum_list(dcfprime)
end

sleep = function (sec)
  os.execute("sleep " .. tonumber(sec))
end

xirr = function(pmts, dates, guess)
   local maxiter = 100
   local epsilon = 0.00001

   if not guess then guess = .10 end

   local x0, x, func, funcp = guess
   for iter = 1, maxiter  do
      func,funcp = _discf(x0, pmts, dates)
      if funcp == 0 then
         print ("Первая производная равна нулю")
         return x0
      end
      x = x0 - func/funcp
      if math.abs(x-x0) < epsilon then return x end
      x0 = x
   end

   assert(false, 'Отсутствует сходимость после '..maxiter..' итераций')
end

calc_bp = function(dates)
--  Базовым периодом признется временной интервал, который является
--  средним арифметическим для всех периодов, округленных с точностью
--  до стандартного временного интервала. Стандартным временным
--  интервалом признются день, месяц, год
   local start = 2
   local stop  = table.getn(dates)
   local date_prev = dates[1]
   local cnt_intervals = stop - 1
   local sum_intervals = 0
   for i = start, stop, 1 do
      sum_intervals = sum_intervals + (dates[i] - date_prev)
      date_prev = dates[i]
   end

   local interval =  math.ceil(sum_intervals / (cnt_intervals))
   local bp_candidates = {30, 91, 365}
   local idx_candidate
   local min_value = 100000
   for idx, candidate in ipairs(bp_candidates) do
      local value = math.abs(candidate - interval)
      if value <= min_value then
         idx_candidate = idx
         min_value = value
      end
   end
   return bp_candidates[idx_candidate]
end

local _discf2 = function(rate, pmts, dates, bp)
   local dcf, dcfprime = 0.0, 0.0

--  cf  - процентная ставка базового периода
--  pf  - срок выраженный в долях базового периода
--  bp  - базовый период
--  nbp - количество базовых периодов (полных)

   for i, cf in ipairs(pmts) do
      local nbp = math.floor((dates[i] - dates[1]) / bp)
      local date_prev = dates[1] + nbp * bp
      local pf  = (dates[i] - date_prev) / bp
      local _dcf  = cf * (1 + pf * rate)^(-1) * (1 + rate)^(-nbp)
      local _dcfprime = cf * (1 + pf * rate)^(-2) * (-(pf * (1 + rate)^(-nbp)) - nbp * (1 + rate)^(-1-nbp) * (1 + pf * rate))

      dcf = dcf + _dcf
      dcfprime = dcfprime + _dcfprime
   end

   return dcf, dcfprime
end

xirr2 = function(pmts, dates, bp, guess)
   local maxiter = 100
   local epsilon = 0.00001

   size = table.getn(pmts)

   if not guess then guess = .01 end

   local x0, x, func, funcp = guess
    for iter = 1, maxiter  do
        func,funcp = _discf2(x0, pmts, dates, bp)
        if funcp == 0 then
            print ('Первая производная равна нулю')
            return x0
      end
        x = x0 - func/funcp
        if math.abs(x-x0) < epsilon then return x end
        x0 = x
   end

    assert(false, 'Отсутствует сходимость после '..maxiter..' итераций')
end

function concat_lists(...)
   local result = {}
   for _, list in ipairs(arg) do
      for i, val in ipairs(list) do table.insert(result, val) end
   end
   return result
end

function trim(s)
   return s:find'^%s*$' and '' or s:match'^%s*(.*%S)'
end

function string:split(sep)
   local sep, result = sep or ",", {}
   local pattern = string.format("([^%s]+)", sep)
   self:gsub(pattern, function(c) result[#result+1] = c end)
   return result
end

function string:split2(sep)
   local sep, result = sep or ",", {}
   if self:len() > 0 then
      local index = 1 start = 1
      local first, last = self:find(sep, start, true)
      while first and maxsplit ~= 0 do
         result[index] = self:sub(start, first-1)
         index = index + 1
         start = last + 1
         first, last = self:find(sep, start, true)
      end
      result[index] = self:sub(start)
   end
   return result
end

-- Преобразует строку в формате mico в число
function string:tonumber_mico()
   return tonumber(string.gsub(self, '[.]', ','), 10)
end

-- Преобразует строку в формате mico в строку в формате lua
function string:mico_to_lua()
   return string.gsub(self, '[.]', ',')
end

-- Преобразует число в строку в формате mico
function tostring_mico(number)
   return string.gsub(tostring(number), ',', '.')
end

local function export_string(s)
      s = string.format("%q", s)
      s = string.gsub(s, "\\\n", "\\n")
      s = string.gsub(s, "\r", "\\r")
      s = string.gsub(s, string.char(26), "\"..string.char(26)..\"")
      return s
end

function table.save(tbl, filename)
   local TAB, EOL  = "   ","\n"
   local file,err

   if not filename then
      file =  { write = function(self, newstr) self.str = self.str..newstr end, str = "" }
      TAB, EOL  = "",""
   else
      file,err = io.open(filename, "w")
      if err then return _,err end
   end

   local tables, lookup = { tbl }, { [tbl] = 1 }
   file:write("return {"..EOL)
   for idx, t in ipairs(tables) do
      file:write("-- Table: {"..idx.."}"..EOL)
      file:write("{"..EOL)
      local thandled = {}
      for i, v in ipairs(t) do
         thandled[i] = true
         if type(v) ~= "userdata" then
            if type(v) == "table" then
               if not lookup[v] then
                  table.insert(tables, v)
                  lookup[v] = #tables
               end
               file:write(TAB.."{"..lookup[v].."},"..EOL)
            elseif type(v) == "function" then
               file:write(TAB.."loadstring("..export_string(string.dump( v )).."),"..EOL)
            else
               local value = (type(v) == "string" and export_string(v)) or tostring(v)
               file:write(TAB..value..","..EOL)
            end
         end
      end
      for i, v in pairs(t) do
         if (not thandled[i]) and type(v) ~= "userdata" then
            if type(i) == "table" then
               if not lookup[i] then
                  table.insert(tables, i)
                  lookup[i] = #tables
               end
               file:write(TAB.."[{"..lookup[i].."}]=")
            else
               local index = (type(i) == "string" and "["..export_string(i).."]") or string.format("[%d]", i)
               file:write(TAB..index.."=")
            end
            if type(v) == "table" then
               if not lookup[v] then
                  table.insert(tables, v)
                  lookup[v] = #tables
               end
               file:write("{"..lookup[v].."},"..EOL)
            elseif type(v) == "function" then
               file:write("loadstring("..export_string(string.dump(v)).."),"..EOL)
            else
               local value = (type(v) == "string" and export_string(v)) or tostring(v)
               file:write(value..","..EOL)
            end
         end
      end
      file:write("},"..EOL)
   end
   file:write("}")

   if not filename then
      return file.str.."--|"
   else
      file:close()
      return 1
   end
end

function table.load(filename)
   if string.sub(filename, -3, -1) == "--|" then
      tables, err = loadstring(filename)
   else
      tables, err = loadfile(filename)
   end
   if err then return _,err end
   tables = tables()
   for idx = 1, #tables do
      local tolinkv, tolinki = {}, {}
      for i, v in pairs(tables[idx]) do
         if type(v) == "table" and tables[v[1]] then
            table.insert(tolinkv, { i, tables[v[1]] })
         end
         if type( i ) == "table" and tables[i[1]] then
            table.insert(tolinki, { i, tables[i[1]] })
         end
      end
      for _,v in ipairs(tolinkv) do
         tables[idx][v[1]] = v[2]
      end
      for _,v in ipairs(tolinki) do
         tables[idx][v[2]],tables[idx][v[1]] =  tables[idx][v[1]],nil
      end
   end
   return tables[1]
end

function table:join(sep)
   if #self == 0 then return "" end
   local sep = sep or ","
   local result = self[1]
   for i = 2, #self do
      result = result..sep..self[i]
   end
   return result
end

function table:sum(tbl)
   for key, val in pairs(tbl) do
      if self[key] then
         self[key] = self[key] + val
      end
   end
   return self
end

function _extend_(base, child)
   local obj = child or {}
   for key, val in pairs(base) do
      if not obj[key] then obj[key] = val end
   end
   return obj
end

function _create_(templ)
   local obj = {}
   for key, val in pairs(templ) do obj[key] = val end
   return obj
end

function class(base, init)
   local c = {}
   if not init and type(base) == 'function' then
      init = base
      base = nil
   elseif type(base) == 'table' then
      for i,v in pairs(base) do
         c[i] = v
      end
      c._base = base
   end
   c.__index = c

   local mt = {}
   mt.__call = function(class_tbl, ...)
   local obj = {}
   setmetatable(obj,c)
   if init then
      init(obj,...)
   else
      if base and base.init then
      base.init(obj, ...)
      end
   end
   return obj
   end
   c.init = init
   c.is_a = function(self, _class)
      local m = getmetatable(self)
      while m do
         if m == _class then return true end
         m = m._base
      end
      return false
   end
   setmetatable(c, mt)
   return c
end

_Base_Akstat = {
   akstat =  nil,
   coll   =  nil,
   names  =  nil,
   details = nil,
   rec_num = 0,
   max_recs = nil,
   ----------------------------------------------------------------------
   create_akstat = function(self, Auth, obj_name)
      local _obj_name = nil
      if self.obj_name then
         _obj_name = self.obj_name
      elseif obj_name then
         _obj_name = obj_name
      end
      if _obj_name then
         self.akstat = Auth.obj_by_name (_obj_name, '')
      end

      self.coll  = Auth.obj_by_name('<null>', 'DB_Coll')
      self.details = {}
      if self.names then self:set_names(self.names) end
   end,
   ----------------------------------------------------------------------
   set_names = function(self, names)
      self.names = names
      self.coll.ClearNames()
      self.coll.AddListOfNames(names)
   end,
   ----------------------------------------------------------------------
   sync_details = function(self)
   end,
   ----------------------------------------------------------------------
   to_first = function(self)
      local result = (self.akstat.ToFirst() == 0)
      if result then
         self.rec_num = 1
         self:sync_details()
      end
      return result
   end,
   ----------------------------------------------------------------------
   to_next = function(self)
      if self.max_recs then
         if self.max_recs == self.rec_num then return false end
      end
      local result = (self.akstat.ToNext() == 0)
      if result then
         self.rec_num = self.rec_num + 1
         self:sync_details()
      end
      return result
   end,
   ----------------------------------------------------------------------
   to_skip = function(self, skip)
      while skip > 0 do
         skip = skip - 1
         if not self:to_next() then return false end
      end
      return true
   end,
   ----------------------------------------------------------------------
   assign_var_long = function (self, name, value)
      self.coll.AssignVarLong(name, value)
   end,
   ----------------------------------------------------------------------
   assign_var_string = function (self, name, value)
      self.coll.AssignVarString(name, value)
   end,
   ----------------------------------------------------------------------
   set_from_coll = function(self, coll, from_names, to_names)
      self.coll.ClearNames()
      coll.SomeVarsToColl(from_names, self.coll, to_names)
   end,
   ----------------------------------------------------------------------
   retrieve_var_string = function(self, name)
   end,
   ----------------------------------------------------------------------
   save = function(self, file_name)
      local data = {}
      local fld_list = string.split(self.names)

      if not self:to_first() then return end
      repeat
         local _current = {}
         self.akstat.DoSelectForColl(self.coll)
         for i, fld in ipairs(fld_list) do
            _current[fld] = self:retrieve_var_string(fld)
         end
      table.insert(data, _current)
      until not self:to_next()
      assert( table.save( data, file_name ) == 1 )
   end
}

_Group_Akstat = {
   _eof     = false,
   _current = nil,

   excel    = nil,
   excel_names = '',
   render_names = '',
   ----------------------------------------------------------------------
   eof     = function(self) return self._eof end,
   current = function(self) return self._current end,
   ----------------------------------------------------------------------
   get_current = function(self)
      self._current = {}
      if self:eof() then
         return
      else
         self.akstat.DoSelectForColl(self.coll)
         for i, fld in ipairs(self.fld_list) do
            self._current[fld] = self:retrieve_var_string(fld)
         end
      end
   end,
   ----------------------------------------------------------------------
   first = function(self)
      result = self:to_first()
      self._eof = not result
      self:get_current()
   end,
   ----------------------------------------------------------------------
   next = function(self)
      result = self:to_next()
      self._eof = not result
      self:get_current()
   end,
   ----------------------------------------------------------------------
   render = function(self)
      self.excel:set_from_coll(self.coll, self.render_names, self.excel_names)
      self.excel:insert()
   end
}

Header = {
   key  = nil,
   type = nil,
   text = nil,
   ----------------------------------------------------------------------
   init = function(self, key, type)
      self.key = key
      if type then self.type = type end
   end,
   ----------------------------------------------------------------------
   render = function(self, current)
   end
}

Text_Header = _extend_(Header, {
   excel = nil,
   excel_name = '',
   ----------------------------------------------------------------------
   init  = function(self, text, excel, excel_name, type)
      Header.init(self, text, type)
      self.excel = excel
      self.excel_name = excel_name
   end,
   ----------------------------------------------------------------------
   render = function(self, current)
      self.excel.coll.ClearNames()
      self.text = self.key
      self.excel:assign_var_string(self.excel_name, self.text)
      if self.type then
         self.excel:assign_var_long('type', self.type)
      end
      self.excel:insert()
   end
})

_Akstat_Header = _extend_(Header, {
   excel = nil,
   excel_name = '',
   excel_type = nil,
   ----------------------------------------------------------------------
   render = function(self, current)
      self.excel.coll.ClearNames()
      self.text = current[self.key]
      self.excel.coll.CreateVar(self.excel_name, self.excel_type, self.text)
      if self.type then
         self.excel:assign_var_long('type', self.type)
      end
      self.excel:insert()
   end
})

Footer = {
   count = 0,
   sums  = nil,
   type  = nil,
   ----------------------------------------------------------------------
   init = function(self, key_list, type, render_type)
      self.sums = {}
      self.keys = string.split(key_list)
      for i, key in ipairs(self.keys) do
         self.sums[key] = self._zero_()
      end
      if type then self.type = type end
   end,
   ----------------------------------------------------------------------
   reset = function(self)
      self.count = 0
      if self.sums then
         for key, val in pairs(self.sums) do
            self.sums[key] = self._zero_()
         end
      end
   end,
   ----------------------------------------------------------------------
   _zero_ = function()
      return 0
   end,
   ----------------------------------------------------------------------
   handle  = function(self, data)
      self.count = self.count + 1
      self:calc_sums(data)
   end,
   ----------------------------------------------------------------------
   calc_sums = function(self, data)
      if self.sums then
         local _val
         for key, val in pairs(self.sums) do
            _val = self:normalize(self:value_by_key(data, key))
--          write_log('key='..key..'; data[key]='..data[key]..'; type(data[key])='..type(data[key])..'; _val='.._val..'\n')
            self.sums[key] = val + _val
         end
      end
   end,
   ----------------------------------------------------------------------
   value_by_key = function(self, data, key)
      return data[key]
   end,
   ----------------------------------------------------------------------
   normalize = function(self, val)
      if type(val) == 'string' then
         return val:mico_to_lua()
      else
         return val
      end
   end,
   ----------------------------------------------------------------------
   render = function(self)
   end
}

Footer_Remap = _extend_(Footer, {
   map_keys = nil,
   ----------------------------------------------------------------------
   init = function(self, src_key_list, dst_key_list, type)
      self.map_keys = {}
      self.sums = {}
      local src_keys, dst_keys = string.split(src_key_list), string.split(dst_key_list)
      for i, key in ipairs(dst_keys) do
         self.map_keys[key] = src_keys[i]
         self.sums[key] = self._zero_()
      end
      if type then self.type = type end
   end,
   ----------------------------------------------------------------------
   value_by_key = function(self, data, key)
      return data[self.map_keys[key]]
   end
})

_Akstat_Footer = _extend_(Footer, {
   excel = nil,
   excel_names = nil,
   excel_types = nil,
   ----------------------------------------------------------------------
   render = function(self)
      self.excel.coll.ClearNames()
      self:render_sums()
      if self.type then
         self.excel:assign_var_long('type', self.type)
      end
      self.excel:insert()
   end,
   ----------------------------------------------------------------------
   render_sums = function(self)
      for key, val in pairs(self.sums) do
         self.excel.coll.CreateVar(self.excel_names[key], self.excel_types[key], tostring_mico(self.sums[key]))
      end
   end
})

DataSet_Array = {
   data  = nil,
   index = 1,
   ----------------------------------------------------------------------
   init = function(self, data)
      self.data = data
   end,
   ----------------------------------------------------------------------
   first = function(self)
      self.index = 1
   end,
   ----------------------------------------------------------------------
   next = function(self)
      if self.index < (#self.data + 1) then self.index = self.index + 1 end
   end,
   ----------------------------------------------------------------------
   eof = function(self)
      return self.index > #self.data
   end,
   ----------------------------------------------------------------------
   current = function(self)
      return self.data[self.index]
   end,
   ----------------------------------------------------------------------
   render = function(self)
   end
}

Row = {
   dataset  = nil,
   group = nil,
   keys  = nil,
   ----------------------------------------------------------------------
   init    = function(self, dataset)
      self.dataset = dataset
      self.group = nil
      self.keys  = nil
   end,
   first   = function(self) self.dataset:first() end,
   next    = function(self) self.dataset:next() end,
   eof     = function(self) return self.dataset:eof() end,
   current = function(self) return self.dataset:current() end,
   render  = function(self) self.dataset:render()end,
   ----------------------------------------------------------------------
   in_group = function(self, group_key)
      if self:eof() then return false end
      if not group_key then return true end

      local current = self:current()

      if not self.group then
         self.group = {}
         self.keys  = {}
      end
      if not self.group[group_key] then
         self.group[group_key] = current[group_key]
         table.insert(self.keys, group_key)
         return true
      end

      for _, key in ipairs(self.keys) do

         if self.group[key] ~= current[key] then
            self.group[group_key] = current[group_key]
            return false
         end

         if key == group_key then
            return true
         end
      end

      return true
   end,
   ----------------------------------------------------------------------
   in_body = function(self, body_key)
      if self:eof() then return false end
      local current = self:current()
      return (current[body_key] == self.group[body_key])
   end
}

Group_Row = {
   row = nil,
   key = nil,
   ----------------------------------------------------------------------
   init = function(self, row, key)
      self.row = row
      self.key = key
   end,
   ----------------------------------------------------------------------
   in_group = function(self)
      return self.row:in_group(self.key)
   end,
   ----------------------------------------------------------------------
   in_body = function(self)
      return self.row:in_body(self.key)
   end
}

Body = _extend_(Group_Row, {
   render = function(self, footer)
     repeat
         self.row:render()
         if footer then footer:handle(self.row:current()) end
         self.row:next()
      until not self:in_body()
   end
})

Group = _extend_(Group_Row, {
   header = nil,
   footer = nil,
   body   = nil,
   ----------------------------------------------------------------------
   init = function(self, row, key, header, footer, body)
      Group_Row.init(self, row, key)
      self.header = header
      self.footer = footer
      if not body then
         self.body = _create_(Body)
         self.body:init(row, key)
      else
         self.body = body
      end
   end,
   ----------------------------------------------------------------------
   render = function(self, footer)
     self.header:render(self.row:current())
     if self.footer then self.footer:reset() end
      while self:in_group() do
         self.body:render(self.footer)
      end
    if footer then footer:handle(self.footer.sums) end
    if self.footer then self.footer:render() end
   end,
   ----------------------------------------------------------------------
   do_render = function(self, footer)
      self.row:first()
      while not self.row:eof() do
         self:render(footer)
--         self.row:next()
      end
      if footer then
         footer:render()
         return footer.sums
      elseif self.footer then
         return self.footer.sums
      end
   end
})
