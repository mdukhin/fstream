#opencfg <abbrs.cfg>
#opencfg <ospcs.cfg>
#opencfg <4glgpf.cfg>
SECPATH=abbrs::;ospcs::;4glgpf::;$CURCFG::;::;.

[Interest]

; Input parameters:
; _date1
; _date2
; _summ
; _rate

;> ----------------------------------------------------------------------------
;> __CalcInterest
;> ----------------------------------------------------------------------------
const char CalcInterest=\
#{
  ((@@_date1 >= @@_date2) || (@@_summ == 0) || (@@_rate==0)) ? return(0): 0;
  $DEC(_part_sum)
  rjulmdy( @@_date1, "_m1", "_d1", "_y1" );
  rjulmdy( @@_date2, "_m2", "_d2", "_y2" );
  _cy = @@_y2 - @@_y1;
  _year = @@_y1;
  _dy1 = call("$CURCFG::$CURSEC:DaysInYear");
  (@@_cy == 0) ? return(@@_summ*@@_rate*0.01*(@@_date2-@@_date1)/@@_dy1) : 0;
  _part_sum = decimal((@@_cy > 1) ? @@_summ*@@_rate*0.01*(@@_cy-1): 0);
  _dt = call("$CURCFG::$CURSEC:EndOfYear");
  _part_sum = @@_part_sum + @@_summ*@@_rate*0.01*(@@_dt-@@_date1)/@@_dy1;
  _year = @@_y2;
  _dy2 = call("$CURCFG::$CURSEC:DaysInYear");
  _dt = call("$CURCFG::$CURSEC:BegOfYear")-1;
  _part_sum = @@_part_sum + @@_summ*@@_rate*0.01*(@@_date2-@@_dt)/@@_dy2;
  return(@@_part_sum);
#}

;> ----------------------------------------------------------------------------
;> __EndOfYear
;> ----------------------------------------------------------------------------
const char EndOfYear=\
#{
  _y = @@_year+1;
  return(date(rmdyjul(1, 1, @@_y)-1));
#}

;> ----------------------------------------------------------------------------
;> __BegOfYear
;> ----------------------------------------------------------------------------
const char BegOfYear=\
#{
  return(date(rmdyjul(1,1, @@_year)));
#}

;> ----------------------------------------------------------------------------
;> __DaysInYear
;> ----------------------------------------------------------------------------
const char DaysInYear=\
#{
  __date1 = date(rmdyjul(1, 1, @@_year));
  _y = @@_year+1;
  __date2 = date(rmdyjul(1, 1, @@_y));
  return(@@__date2-@@__date1);
#}

[Crypt]

const char encrypt_parms=_input_value,_input_key
const char encrypt=\
#{
  $CHAR(_new_value)
    _new_value=read( "perl $FSDIR/bin/encrypt \"@_input_value\" \"@_input_key\"|");
  return(@@_new_value);
#}

const char decrypt_parms=_input_value,_input_key
const char decrypt=\
#{
  $CHAR(_new_value)
    _new_value=read( "perl $FSDIR/bin/decrypt \"@_input_value\" \"@_input_key\"|");
  return(@@_new_value);
#}


[DateFunc]

const long DATE_20111230 = 40906
const long DATE_20111130 = 40876
const long DATE_20121229 = 41271



;> ----------------------------------------------------------------------------
;> __get_leap_for_period
;> ----------------------------------------------------------------------------
const char get_leap_for_period_parms=_date0,_date1
const char get_leap_for_period=\
#{
  $LONG(_d0, _m0, _y0, _febr0, _dec0, _is_leap0)
  $LONG(_d1, _m1, _y1, _febr1, _jan1, _is_leap1)

  rjulmdy(@@_date0, "_m0", "_d0", "_y0");
  rjulmdy(@@_date1, "_m1", "_d1", "_y1");

; -------------------------------------
; 28.02 + один день
; -------------------------------------
  _febr0 = long(rmdyjul(2, 28, @@_y0) + 1);
  _febr1 = long(rmdyjul(2, 28, @@_y1) + 1);

; -------------------------------------
; разница между 01.03 и предыдущими переменными
;   0 - невисокосный/1 - високосный
; -------------------------------------
  _is_leap0 = long(rmdyjul(3, 1, @@_y0)) - @@_febr0;
  _is_leap1 = long(rmdyjul(3, 1, @@_y1)) - @@_febr1;

; -------------------------------------
; необходимое условие - этот день должен находится во временных пределах договора
; -------------------------------------
  _is_leap0 = ((@@_febr0 >= @@_date0) && (@@_febr0 <= @@_date1)) ? @@_is_leap0 : 0;
  _is_leap1 = ((@@_febr1 >= @@_date0) && (@@_febr1 <= @@_date1)) ? @@_is_leap1 : 0;

; -------------------------------------
; считаем период с учетом високосности
; -------------------------------------
  _dec0 =  long(rmdyjul(12, 31, @@_y0));
  _jan1 =  long(rmdyjul(01, 01, @@_y1));

  $LONG(_period_leap)
  _period_leap = ((@@_y1 - @@_y0) <= 1)
      ? (@@_date1 - @@_date0 - (@@_is_leap1 > @@_is_leap0 ? @@_is_leap1 : @@_is_leap0))
      : (
          (@@_dec0 - @@_date0 - @@_is_leap0) + 
          (365 * (@@_y1 - @@_y0 - 1)) +
          (@@_date1 - @@_jan1 - @@_is_leap1) + 
          1
        );

  $LONG(_period_real)
  _period_real = @@_date1 - @@_date0;

  $LONG(_result)
  _result = (@@_period_real > @@_period_leap) ? 1 : 0;
  return(@@_result);
#}

;> ----------------------------------------------------------------------------
;> __calcLeapKoef
;> ----------------------------------------------------------------------------
const char calcLeapKoefs_parms=_tbl,_date0,_date1,_fld_leap0,_fld_leap1
const char calcLeapKoefs=\
#{
; -------------------------------------
; коэфициент високосности в годе первой даты (м.б. отчетная или датой открытия)
;  (существует 29.02 + оно находится между датой отчета и датой закрытия)
; -------------------------------------
  SQL
		UPDATE @_tbl SET @_fld_leap0 = 1
		WHERE
			MDY(3, 1, YEAR(@_date0)) - MDY(2, 28, YEAR(@_date0)) > 1
			AND MDY(2, 28, YEAR(@_date0)) + 1 BETWEEN @_date0 AND @_date1;

; -------------------------------------
; коэфициент високосности в годе даты закрытия
;  (существует 29.02 + оно находится между датой отчета и датой закрытия)
; -------------------------------------
  SQL
		UPDATE @_tbl SET @_fld_leap1 = 1
		WHERE
			MDY(3, 1, YEAR(@_date1)) - MDY(2, 28, YEAR(@_date1)) > 1
			AND MDY(2, 28, YEAR(@_date1)) + 1 BETWEEN @_date0 AND @_date1;
#}

;> ----------------------------------------------------------------------------
;> __calcLeapKoef
;> ----------------------------------------------------------------------------
const char calcPeriod_with_LeapKoefs_parms=_tbl,_fld_period,_date0,_date1,_fld_leap0,_fld_leap1
const char calcPeriod_with_LeapKoefs=\
#{
  call("$CURCFG::$CURSEC:calcLeapKoefs", @@_tbl, @@_date0, @@_date1, @@_fld_leap0, @@_fld_leap1);

; -------------------------------------
; если период договора входит в промежуток между двумя годами подряд
; просто вычитаем крайние даты, учитывая поправку на високосность только 1 раз (max2)
; -------------------------------------
  SQL
    UPDATE @_tbl SET @_fld_period = @_date1 - @_date0 - MAX2(@_fld_leap0, @_fld_leap1)
    WHERE YEAR(@_date1) - YEAR(@_date0) <= 1;

; -------------------------------------
; если конечные даты договора разделяет больше чем 1 год - 
; диапазон вычисляется по формуле:
; (от начала договора до конца текущего года с учетом високосности) +
; (365 на количество лет между конечными датами) + 
; (от начала года закрытия до даты окончания договора с учетом високосности) + 
; (один день, который теряется из-за совмещения первого и третьего слагаемых)
; -------------------------------------
  SQL 
    UPDATE @_tbl SET @_fld_period = ( MDY(12, 31, YEAR(@_date0)) - @_date0 - @_fld_leap0 ) +
                                    ( 365 * (YEAR(@_date1) - YEAR(@_date0) - 1)          ) +
                                    ( @_date1 - MDY(01, 01, YEAR(@_date1)) - @_fld_leap1 ) + 1
    WHERE YEAR(@_date1) - YEAR(@_date0) > 1;

#}

;> ----------------------------------------------------------------------------
;> __calcReservCurrDay
;> ----------------------------------------------------------------------------
const char calcReservCurrDay_parms=_op_day
const char calcReservCurrDay=\
#{
  $LONG(last_work_day)
  last_work_day = CldGetLimit(@@_op_day, "ldom");

; -------------------------------------
; сложная редкая ситуация (приходится вмешиваться вручную)
; -------------------------------------
  (@@_op_day == $DATE_20111230)
       ? return($DATE_20111130)
       : 0;

  (@@_op_day == $DATE_20121229)
       ? return($DATE_20121229)
       : 0;

; -------------------------------------
  (@@_op_day == @@last_work_day)
       ? return(@@_op_day)
       : return(call("$CURCFG::$CURSEC:EndWork_Of_PrevMonth", @@_op_day));
#}

;> ----------------------------------------------------------------------------
;> __EndWork_Of_PrevMonth
;> ----------------------------------------------------------------------------
const char EndWork_Of_PrevMonth_parms=_op_day
const char EndWork_Of_PrevMonth=\
#{
  $LONG(last_work_day_prev_month)
  last_work_day_prev_month = call("$CURCFG::$CURSEC:EndOfPrevMonth", @@_op_day);
  last_work_day_prev_month = CldGetLimit(@@last_work_day_prev_month,"ldom");
  return(@@last_work_day_prev_month);
#}

;> ----------------------------------------------------------------------------
;> __BegOfPrevMonth
;> ----------------------------------------------------------------------------
const char BegOfPrevMonth=\
#{

  rjulmdy( Otoday(), "_mon", "_day", "_year" );
  _day = 1;
  _mon = @_mon-1;
  (@_mon < 1)? (_year = @_year-1): 0;
  (@_mon < 1)? (_mon = 12): 0;
  return(date(rmdyjul(@_mon, @_day, @_year)));
#}

;> ----------------------------------------------------------------------------
;> __EndOfPrevMonth
;> ----------------------------------------------------------------------------
const char EndOfPrevMonth_parms=_op_day
const char EndOfPrevMonth=\
#{
  rjulmdy(@@_op_day, "_mon", "_day", "_year");
  _day = 1;
  return(date(rmdyjul(@_mon, @_day, @_year)-1));
#}

;> ----------------------------------------------------------------------------
;> __BegOfThisMonth
;> ----------------------------------------------------------------------------
const char BegOfThisMonth=\
#{
  _date = Otoday();
  return(call("$CURCFG::$CURSEC:BegOfMonth"));
#}

;> ----------------------------------------------------------------------------
;> __EndOfThisMonth
;> ----------------------------------------------------------------------------
const char EndOfThisMonth=\
#{--
  _date = Otoday();
  return(call("$CURCFG::$CURSEC:EndOfMonth"));
#}

;> ----------------------------------------------------------------------------
;> __BegOfThisYear
;> ----------------------------------------------------------------------------
const char BegOfThisYear=\
#{
  rjulmdy( Otoday(), "_mon", "_day", "_year" );
  _day = 1;
  _mon = 1;
  return(date(rmdyjul(@_mon, @_day, @_year)));
#}

;> ----------------------------------------------------------------------------
;> __BegOfMonth
;> ----------------------------------------------------------------------------
const char BegOfMonth=\
#{
  rjulmdy( @@_date, "_mon", "_day", "_year" );
  _day = 1;
  return(date(rmdyjul(@_mon, @_day, @_year)));
#}

;> ----------------------------------------------------------------------------
;> __EndOfMonth
;> ----------------------------------------------------------------------------
const char EndOfMonth=\
#{
  rjulmdy( @@_date, "_mon", "_day", "_year" );
  _day = 1;
  _mon = @_mon+1;
  (@_mon > 12)? (_year = @_year+1): 0;
  (@_mon > 12)? (_mon = 1): 0;
  return(date(rmdyjul(@_mon, @_day, @_year)-1));
#}

;> ----------------------------------------------------------------------------
;> __BegOfQuart
;> ----------------------------------------------------------------------------
const char BegOfQuart=\
#{
  rjulmdy( @@_date, "_mon", "_day", "_year" );
  _day = 1;
  _mon = long((@@_mon-1) / 3)*3 + 1;
  return(date(rmdyjul(@_mon, @_day, @_year)));
#}

;> ----------------------------------------------------------------------------
;> __EndOfQuart
;> ----------------------------------------------------------------------------
const char EndOfQuart=\
#{
  rjulmdy( @@_date, "_mon", "_day", "_year" );
  _day = 1;
  _mon = long((@@_mon-1) / 3)*3 + 4;
  (@_mon > 12)? (_year = @_year+1): 0;
  (@_mon > 12)? (_mon = 1): 0;
  return(date(rmdyjul(@_mon, @_day, @_year)-1));
#}

;> ----------------------------------------------------------------------------
;> __BegOfNextQuart
;> ----------------------------------------------------------------------------
const char BegOfNextQuart=\
#{
  return(call("$CURCFG::$CURSEC:EndOfQuart")+1);
#}

;> ----------------------------------------------------------------------------
;> __NextOpDay
;> ----------------------------------------------------------------------------
const char NextOpDay=\
#{
  $LONG(_date,_next_date)
  _date = Otoday();
  _next_date=PeriodNextDay(@@_date);
  return(@@_next_date);
#}

;> ----------------------------------------------------------------------------
;> __getWorkDays_in_period
;    поиск всех рабочих дней между входными датами (включительно)
;    и сохранение их в таблицу
;> ----------------------------------------------------------------------------
const char getWorkDays_in_period_parms=_date1,_date2,_table_name,_field_name
const char getWorkDays_in_period=\
#{
  $LONG(_op_day)
    _op_day = @@_date1 - 1; 

; -------------------------------------
; временная таблица для выяснения дня недели
  while("@@_op_day < @@_date2", ConfigGetString("$CURCFG::$CURSEC:getNextWorkDay_and_saveIt"));
#}

;> ----------------------------------------------------------------------------
;> __getNextWorkDay_and_saveIt
; in
;   _op_day
;   _table_name
;   _field_name
;> ----------------------------------------------------------------------------
const char getNextWorkDay_and_saveIt=\
#{
  $LONG(res,work_day_res)
    res = 0;
    work_day_res = @@_op_day;

; -------------------------------------
; прибавляем в цикле по одному дню, пока результат = 0 
; (это означает что календарь заведён на тек. дату и она выходной)
  while("@@res == 0", ConfigGetString("$CURCFG::$CURSEC:getNextWorkday"));
  _op_day = @@work_day_res;

  SQL INSERT INTO @_table_name (@_field_name) VALUES (@_op_day);
#}


;> ----------------------------------------------------------------------------
;> __calcCntWorkDay
;    поиск n-ого рабочего дня относительно входной даты
;> ----------------------------------------------------------------------------
const char calcCntWorkDay_parms=_date_from,_wdays_cnt
const char calcCntWorkDay=\
#{
  $LONG(_cnt,work_day_res)
    _cnt = 0; 
    work_day_res = @@_date_from;

; -------------------------------------
; временная таблица для выяснения дня недели
  while("@@_cnt < @@_wdays_cnt", ConfigGetString("$CURCFG::$CURSEC:calcNextWorkDay"));

  return(@@work_day_res);
#}

;> ----------------------------------------------------------------------------
;> __calcNextWorkDay
; in
;   _cnt - счетчик (глобальная переменная)
;> ----------------------------------------------------------------------------
const char calcNextWorkDay=\
#{
  _cnt = @@_cnt + 1;

; прибавляем в цикле по одному дню, пока результат = 0 
; (это означает что календарь заведён на тек. дату и она выходной)
  $LONG(res) res = 0;
  while("@@res == 0", ConfigGetString("$CURCFG::$CURSEC:getNextWorkday"));
#}

;> ----------------------------------------------------------------------------
;> __getNextWorkday
; in
;   work_day_res - конечная дата (глобальная переменная)
;   res          - признак наличия календаря в АБС
;> ----------------------------------------------------------------------------
const char getNextWorkday=\
#{
  work_day_res = @@work_day_res + 1;
  res = IsWorkDay(@@work_day_res);

; -------------------------------------
; если календаря нет (=> выход из цикла) - учитываем только субботу или воскресенье
  work_day_res = ( (@@res == -1)
                      ? call("$CURCFG::$CURSEC:shift_day_without_calendar", @@work_day_res, "+")
                      : @@work_day_res
                 );
#}

;> ----------------------------------------------------------------------------
;> __correct_day_for_january
;> ----------------------------------------------------------------------------
const char _correct_day_for_january_parms=_op_day,_day,_year,_direction
const char _correct_day_for_january=\
#{
; -------------------------------------
; 9-ое января ключевая дата
; -------------------------------------
  $LONG(_jan9)
   _jan9 = long(rmdyjul(01, 09, @@_year));

  $LONG(_weekday_jan9) _weekday_jan9 = rdayofweek(@@_jan9);

; -------------------------------------
; первый рабочий день января (приблизительно)
;   если 09 - с четверга по воскресенье, то ближайший понедельник
;     иначе - 09 января
; -------------------------------------
  $LONG(_fdom_jan)
  _fdom_jan = (@@_weekday_jan9 == 4) ? long(rmdyjul(01, 13, @@_year))
            : (@@_weekday_jan9 == 5) ? long(rmdyjul(01, 12, @@_year))
            : (@@_weekday_jan9 == 6) ? long(rmdyjul(01, 11, @@_year))
            : (@@_weekday_jan9 == 0) ? long(rmdyjul(01, 10, @@_year))
                                     : @@_jan9;

; -------------------------------------
; то для случая, когда опердень меньше первого рабочего дня, 
;    если направление возможного сдвига "-" - сразу переводим поиск на конец декабря предыдущего года
;    если направление возможного сдвига "+" - то первый рабочий день января
; -------------------------------------
  (@@_op_day < @@_fdom_jan)
      ? (@@_direction == "-") ? return( long(rmdyjul(31, 12, @@_year - 1)) )
                              : return( @@_fdom_jan )
      : return(@@_op_day);
#}

;> ----------------------------------------------------------------------------
;> __shift_day_without_calendar
;> ----------------------------------------------------------------------------
const char shift_day_without_calendar_parms=_op_day,_direction
const char shift_day_without_calendar=\
#{
; -------------------------------------
; примерный разбор январских каникул
; -------------------------------------
  $LONG(_mon,_day,_year)
  rjulmdy(@@_op_day, "_mon", "_day", "_year");

  _op_day = ((@@_mon == 1))
                  ? call("$CURCFG::$CURSEC:_correct_day_for_january", @@_op_day, @@_day, @@_year, @@_direction)
                  : @@_op_day;
  
; -------------------------------------
; в обычном режиме
; -------------------------------------
  $LONG(_weekday) _weekday = rdayofweek(@@_op_day);

; -------------------------------------
; если сдвигаемся назад то: 
;   6-ой (суббота => - 1 день)
;   0-ой (воскр.  => - 2 дня)
; если вперед то:
;   6-ой (суббота => + 2 день)
;   0-ой (воскр.  => + 1 дня)
; -------------------------------------

  $LONG(_shift)
    _shift = (@@_direction == "-") 
                ? ((@@_weekday == 6) ? -1 : ((@@_weekday == 0) ? -2 : 0))
                : ((@@_weekday == 6) ?  2 : ((@@_weekday == 0) ?  1 : 0));

  return(@@_op_day + @@_shift);
#}


;> ----------------------------------------------------------------------------
;> __get_week_day (реализация формулы Зеллера)
;    (ВС:0; ПН:1; ВТ:2; СР:3; ЧТ:4; ПТ:5; СБ:6)
;> ----------------------------------------------------------------------------
const char get_week_day_parms=_op_day
const char get_week_day=\
#{
  $LONG(_D,_M,_Y)
    rjulmdy(@@_op_day, "_M", "_D", "_Y");

  $LONG(_a) _a = long((14 - @_M) / 12);
  $LONG(_y) _y = @_Y - @_a;
  $LONG(_m) _m = long(@_M + 12 * @_a - 2);
  $LONG(_r) _r = 7000 + (@_D + @_y + long(@_y / 4) - long(@_y / 100) + long(@_y / 400) + long(31 * @_m / 12));
  
  return(long(@_r % 7));
#}



[]



[Utl_2Groups_TMP_Table]
const char main_class=DB_Rrel
const char tabname=utl_2groups_tmp_table
const char is_temp=1
const char fld_desc=\
#{","
  c_report serial
  c_group0 int
  c_group1 int
#}


[Utl_2Groups_TMP]
const char main_class=DB_Kstat
const char ks_table=$CURCFG::Utl_2Groups_TMP_Table
const char ks_keys=c_report
const char serial=c_report
const char mode=sidur
const char cursor_type=scroll
const char read_access=any
const char update_access=any
const char insert_access=any
const char delete_access=any

const char refs_x1=\
#{";"
  RightsDiff($CURCFG::Utl_2Groups_RightsDiff_RPT):c_group0,c_group1
#}


[Utl_EmptyGroups_RPT]
const char main_class=DB_Ksrpt
const char read_access=any
const char ks_keys=c_group
const char cursor_type=scroll
const char attrs=\
#{","
  c_group int
  name char(160)
  shname char(20)
#}

; -----------------------------------------------------------------------------
const char pipe_reread=!
const char pipe_prepare=\
#{
  SQL DELETE FROM @_rpt_table;
  -SQL CREATE UNIQUE INDEX idx_@{_rpt_table}_0 ON @_rpt_table (c_group);
  SQL
    INSERT INTO @_rpt_table (c_group, name, shname)
      SELECT g.c_group, g.name, g.shname
      FROM groups g
      WHERE NOT EXISTS
        (
          SELECT *
          FROM users u
          WHERE
            u.c_group = g.c_group
            AND current BETWEEN u.open_day AND u.delete_day
        );
  SQL UPDATE STATISTICS HIGH FOR TABLE @_rpt_table (c_group);
#}


[Utl_2Groups_RightsDiff_RPT]
const char main_class=DB_Ksrpt
const char read_access=any
const char ks_keys=c_diff
const char serial=c_diff
const char cursor_type=scroll
const char base_attrs=c_group0,c_group1
const char attrs=\
#{","
  c_diff serial
  c_base_right         int default 0
  c_base_right_extra   int default 0
  c_base_right_missing int default 0
; -----------------
  c_group0 int
  c_group1 int
#}

const char foreigns=\
#{";"
  BaseRights_Extra(BaseRightsDef):c_base_right_extra(c_base_right)
  BaseRights_Missing(BaseRightsDef):c_base_right_missing(c_base_right)
#}

; -----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL CREATE UNIQUE INDEX idx_@{_rpt_table}_0 ON @_rpt_table (c_diff);

  ((@@c_group0 == 0) || (@@c_group1 == 0)) ? return(0) : 0;

; -------------------------------------
; рабочие места присутствующие в первой группе и отсутствующие во второй
; -------------------------------------
  SQL
    INSERT INTO @_rpt_table (c_group0, c_group1, c_base_right, c_base_right_missing)
      SELECT g0.c_group, @c_group1, g0.c_base_right, g0.c_base_right
      FROM grouprights g0
      WHERE 
        g0.c_group = @c_group0
        AND NOT EXISTS
        (
          SELECT *
          FROM grouprights g1
          WHERE
            g1.c_group = @c_group1
            AND g1.c_base_right = g0.c_base_right
        );

; -------------------------------------
; рабочие места присутствующие в второй группе и отсутствующие в первой
; -------------------------------------
  SQL
    INSERT INTO @_rpt_table (c_group0, c_group1, c_base_right, c_base_right_extra)
      SELECT @c_group1, g1.c_group, g1.c_base_right, g1.c_base_right
      FROM grouprights g1
      WHERE 
        g1.c_group = @c_group1
        AND NOT EXISTS
        (
          SELECT *
          FROM grouprights g0
          WHERE
            g0.c_group = @c_group0
            AND g0.c_base_right = g1.c_base_right
        );

  SQL CREATE UNIQUE INDEX idx_@{_rpt_table}_1 ON @_rpt_table (c_base_right);
  SQL UPDATE STATISTICS HIGH FOR TABLE @_rpt_table (c_diff, c_base_right);
#}

[]
