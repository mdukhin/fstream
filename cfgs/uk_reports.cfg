; =============================================================================
; УК (отчеты)
; 
; created by du      :  2017-08-17
; =============================================================================

#opencfg <dbores.cfg>
#opencfg <bobmisc.cfg>
#opencfg <crbase.cfg>
#opencfg <uk_const.cfg>
;

SECPATH=abbrs::;ospcs::;4glgpf::;crbase::;uk_const::;dbores::;$CURCFG::;::;.

[]

; =============================================================================
; отчеты
; =============================================================================
[UK_Reports_Actual_For_User]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_Def
const char ks_where=$BRANCH_EXT_WHERE_OBJ and [access] <= @user_access and [state] not in ($REPORT_STATE_DISABLED)


[UK_Reports_Def]
const char main_class=DB_Kstat
const char read_access=any
const char update_access=PLACE_UK_REPORTS_ADMIN
const char insert_access=PLACE_UK_REPORTS_ADMIN
const char delete_access=PLACE_UK_REPORTS_ADMIN
const char mode=sidur
const char ks_table=$uk_reports_def
const char ks_keys=c_report
const char serial=c_report
const char ks_order=report_group,abbr
const char ks_defaults=\
#{";"
  state:0
  c_branch:@BranchSelect.c_branch
  access:0
  report_group:0
  abbr:
  name:
  comment:
  period_type:
  excel_file:
#}

const char rfc_modifiers=\
#{";"
  RepParam_Branch:d
  RepParam_Account:d
  RepParam_NAccnt:d
  RepParam_NSymbf2:d
  RepParam_Contractor:d
  RepParam_Employee:d
#}

const char foreigns=\
#{";"
  ReportGroup(uk_main::UK_Abbrs_Report_Groups):report_group(type)
  ReportState(uk_main::UK_Abbrs_Report_States):state(type)
  PeriodType(uk_main::UK_Abbrs_RepPeriod_Types):period_type(type)
#}

const char outer_slaves=\
#{";"
  RepParam_Branch($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_BRANCH'(type)
  RepParam_Account($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_ACCOUNT'(type)
  RepParam_NAccnt($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_NACCOUNT'(type)
  RepParam_NSymbf2($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_NSYMBF2'(type)
  RepParam_Contractor($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_CONTRACTOR'(type)
  RepParam_Employee($CURCFG::UK_Reports_Ext_Params):c_report,'$REPPARAM_TYPE_EMPLOYEE'(type)
#}

[UK_Reports_Ext_Params]
const char main_class=DB_Kstat
const char read_access=any
const char update_access=PLACE_UK_REPORTS_ADMIN
const char insert_access=PLACE_UK_REPORTS_ADMIN
const char delete_access=PLACE_UK_REPORTS_ADMIN
const char mode=sidur
const char ks_table=$uk_reports_params
const char ks_keys=c_report,type
const char ks_defaults=\
#{";"
  type:$_FALSE
  value:$_FALSE
#}

const char foreigns=\
#{";"
  ReportParam(uk_main::UK_Abbrs_RepParam_Types):type
#}


; =============================================================================
;> __Reports_MSFO_Lines
; справочник строк в семействе отчетов МСФО (042000x)
; =============================================================================
[UK_Reports_MSFO_Lines_Def]
const char main_class=DB_Kstat
const char read_access=any
const char update_access=PLACE_UK_REPORTS_ADMIN
const char insert_access=PLACE_UK_REPORTS_ADMIN
const char delete_access=PLACE_UK_REPORTS_ADMIN
const char mode=sidur
const char ks_table=$uk_reports_msfo_lines_def
const char ks_keys=c_msfo_line
const char serial=c_msfo_line
const char ks_order=msfo_report,number
const char ks_defaults=\
#{";"
  msfo_report:0
  shname:
  section:0
  number:0
  calc_kind:$CALC_KIND_AS_IS
  open_day:@today
  delete_day:$DayMax
#}

const char foreigns=\
#{";"
  MSFO_Report(uk_main::UK_Abbrs_MSFO_Reports):msfo_report(type)
  CalcKind(uk_main::UK_Abbrs_Calc_Kinds):calc_kind(type)
#}

const char references=\
#{";"
  Naccnts($CURCFG::UK_Reports_MSFO_Lines_Naccnts):c_msfo_line
  Nsymbf2_f5($CURCFG::UK_Reports_MSFO_Lines_Nsymbf2_f5):c_msfo_line
#}

const char synonyms=\
#{";"
  __shname[80]=![7MSFO_Report.sabbr] - [number/&&]. [shname]
  _shname[80]=![number/&&]. [shname]
#}

const pipe_pre_delete=\
#{
  $LONG(_cnt)

  SQL select count(*) into ?_cnt from $uk_reports_msfo_lines_naccnts where c_msfo_line = @c_msfo_line;
  (@@_cnt == 0)
      ? 0
      : RaiseError(-1, "Группировка содержит БС (@_cnt шт.). Сначала выведите их из группировки", "");


  SQL select count(*) into ?_cnt from $uk_reports_msfo_lines_nsymbf2_f5 where c_msfo_line = @c_msfo_line;
  (@@_cnt == 0)
      ? 0
      : RaiseError(-1, "Группировка содержит символы дох/расх (@_cnt шт.). Сначала выведите их из группировки", "");

#}


; =============================================================================
; распределение БС по группировок
; =============================================================================
[UK_Reports_MSFO_Lines_Naccnts_OnDay_0420002]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay
const char ks_where=[MSFO_Line.msfo_report]=$MSFO_REPORT_BALANCE

[UK_Reports_MSFO_Lines_Naccnts_OnDay_0420003]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay
const char ks_where=[MSFO_Line.msfo_report]=$MSFO_REPORT_FIN_RESULT

[UK_Reports_MSFO_Lines_Naccnts_OnDay_0420005]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay
const char ks_where=[MSFO_Line.msfo_report]=$MSFO_REPORT_CASH_FLOWS



[UK_Reports_MSFO_Lines_Naccnts_OnDay]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Naccnts
const char ks_keys=c_msfo_line_naccnt,#today
const char pseudo_keys=\
#{
  today/delete_day:#today between [open_day] and [delete_day];
#}

[UK_Reports_MSFO_Lines_Naccnts]
const char main_class=DB_Kstat
const char read_access=any
const char update_access=PLACE_UK_REPORTS_ADMIN
const char insert_access=PLACE_UK_REPORTS_ADMIN
const char delete_access=PLACE_UK_REPORTS_ADMIN 
const char mode=sidur
const char ks_table=$uk_reports_msfo_lines_naccnts
const char ks_keys=c_msfo_line_naccnt
const char serial=c_msfo_line_naccnt
const char ks_defaults=\
#{";"
  c_msfo_line:0
  c_naccnt:0
  accnt_kinds:
  rest_kind:$RESTKIND_DEBIT
  coefficient:1
  open_day:@today
  delete_day:$DayMax
#}

const char foreigns=\
#{";"
  RestKind(uk_main::UK_Abbrs_Rest_Kinds):rest_kind(type)
  MSFO_Line($CURCFG::UK_Reports_MSFO_Lines_Def):c_msfo_line
  MSFO_Report(uk_main::UK_Abbrs_MSFO_Reports):MSFO_Line.msfo_report(type)
  Naccnt(NPl_accnt2):c_naccnt
#}

const char synonyms=\
#{";"
  section[LONG]==MSFO_Line.section
#}

; =============================================================================
; распределение символов дох/расходов по группировкам
; =============================================================================
[UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay_0420002]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay
const char ks_where=[MSFO_Line.msfo_report]=$MSFO_REPORT_BALANCE

[UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay_0420003]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay
const char ks_where=[MSFO_Line.msfo_report]=$MSFO_REPORT_FIN_RESULT

[UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay]
const char main_class=DB_Kscurs
const char parent_kstat=$CURCFG::UK_Reports_MSFO_Lines_Nsymbf2_f5
const char ks_keys=c_msfo_line_nsymbf2_f5,#today
const char pseudo_keys=\
#{
  today/delete_day:#today between [open_day] and [delete_day];
#}


[UK_Reports_MSFO_Lines_Nsymbf2_f5]
const char main_class=DB_Kstat
const char read_access=any
const char update_access=PLACE_UK_REPORTS_ADMIN
const char insert_access=PLACE_UK_REPORTS_ADMIN
const char delete_access=PLACE_UK_REPORTS_ADMIN 
const char mode=sidur
const char ks_table=$uk_reports_msfo_lines_nsymbf2_f5
const char ks_keys=c_msfo_line_nsymbf2_f5
const char serial=c_msfo_line_nsymbf2_f5
const char ks_defaults=\
#{";"
  c_msfo_line:0
  c_nsymbf2_f5:0
  rest_kind:$RESTKIND_DEBIT
  coefficient:1
  open_day:@today
  delete_day:$DayMax
#}

const char foreigns=\
#{";"
  RestKind(uk_main::UK_Abbrs_Rest_Kinds):rest_kind(type)
  MSFO_Line($CURCFG::UK_Reports_MSFO_Lines_Def):c_msfo_line
  MSFO_Report(uk_main::UK_Abbrs_MSFO_Reports):MSFO_Line.msfo_report(type)
  Nsymbf2_f5(Nsymbols2_f5):c_nsymbf2_f5
#}

const char synonyms=\
#{";"
  section[LONG]==MSFO_Line.section
#}



; =============================================================================
; ОСВ (оборотно-сальдовая ведомость)
;   1) по всем лицевым ненулевым(!) счетам
;   2) в excel дополнительно строится итог по БС
; =============================================================================
[UK_Report_Balance]
const char main_class=DB_Ksrpt
const char ks_keys=c_accnt,c_curr
const char ks_order=naccnt,c_curr,c_accnt
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_branch,date0,date1,c_naccnt_list,c_nsymbf2_list
const char attrs=\
#{","
  c_accnt           int
  c_curr            int
  open_day          int
  c_naccnt          int
  naccnt            int
;
  debit1            money default 0
  credit1           money default 0
  debit_to          money default 0
  credit_to         money default 0
  debit2            money default 0
  credit2           money default 0
;
  global_turn       money default 0
;
  c_branch          int
  date0             date
  date1             date
  c_naccnt_list     varchar(240)
  c_nsymbf2_list    varchar(240)
#}

const char foreigns=\
#{";"
  Accnt(AccntDay):c_accnt,open_day(#today)
  AccntCurr(AccntCurrDay):c_accnt,c_curr,open_day(#today)
#}

const char refs_x1=\
#{";"
  Rep_MSFO_Line_NAccnt_0420002($CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay_0420002):c_naccnt,date1(#today)
  Rep_MSFO_Line_NAccnt_0420003($CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay_0420003):c_naccnt,date1(#today)
  Rep_MSFO_Line_NSymbf2_0420003($CURCFG::UK_Reports_MSFO_Lines_Nsymbf2_f5_OnDay_0420003):Accnt.c_nsymbf2_f5(c_nsymbf2_f5),date1(#today)
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_accnt, c_curr);

; -------------------------------------
; даты в числа + вычисляем дату для входящего остатка
; -------------------------------------
  $LONG(_date0,_date1,_date_rest0,_date_rest1)
    _date0 = long(@@date0);
    _date1 = long(@@date1);

    -SQL select max(o.op_day) into ?_date_rest0 from opdays o where o.op_day < @_date0;
    _date_rest0 = isnull(@@_date_rest0) ? 0 : @@_date_rest0;

    -SQL select max(o.op_day) into ?_date_rest1 from opdays o where o.op_day <= @_date1;
    _date_rest1 = isnull(@@_date_rest1) ? 0 : @@_date_rest1;

; -------------------------------------
; все лицевые счета в проекте с входящими остатками
; -------------------------------------
  $CHAR(_where_naccnts,_where_nsymbf2)
    _where_naccnts  = (@@c_naccnt_list  == "$_EMPTY") ? "a.c_naccnt"     : @@c_naccnt_list;
    _where_nsymbf2  = (@@c_nsymbf2_list == "$_EMPTY") ? "a.c_nsymbf2_f5" : @@c_nsymbf2_list;

  SQL
    insert into @_rpt_table (c_accnt, c_curr, open_day, c_naccnt, naccnt, debit1, credit1, date0, date1)
      select m.c_accnt, m.c_curr, m.open_day, a.c_naccnt, a.naccnt, nvl(t.debit2, 0), nvl(t.credit2, 0), @_date0, @_date1
      from accnts_multi m
             join accnts_def a on
                                  a.c_accnt = m.c_accnt and
                                  a.c_branch = @c_branch and
                                  a.c_naccnt in (@_where_naccnts) and
                                  a.c_nsymbf2_f5 in (@_where_nsymbf2)
        left join turnovers  t on t.c_accnt = m.c_accnt and t.c_curr   = m.c_curr and t.op_day = @_date_rest0;
  SQL update statistics high for table @_rpt_table (c_accnt,c_curr);
   
; -------------------------------------
; обороты за отчетный период
; -------------------------------------
  SQL
    update @_rpt_table set (debit_to, credit_to) =
      ((
        select sum(t.debit_to), sum(t.credit_to)
        from turnovers t
        where
          t.c_accnt = @_rpt_table.c_accnt and
          t.c_curr  = @_rpt_table.c_curr  and
          t.op_day between @_date0 and @_date1
      ))
    where exists
      (
        select *
        from turnovers t
        where
          t.c_accnt = @_rpt_table.c_accnt and
          t.c_curr  = @_rpt_table.c_curr  and
          t.op_day between @_date0 and @_date1
      );

; -------------------------------------
; исх. остатки
; -------------------------------------
  SQL
    update @_rpt_table set (debit2, credit2) =
      ((
        select t.debit2, t.credit2
        from turnovers t
        where
          t.c_accnt = @_rpt_table.c_accnt and
          t.c_curr  = @_rpt_table.c_curr  and
          t.op_day  = @_date_rest1
      ))
    where exists
      (
        select *
        from turnovers t
        where
          t.c_accnt = @_rpt_table.c_accnt and
          t.c_curr  = @_rpt_table.c_curr  and
          t.op_day  = @_date_rest1
      );

  SQL update @_rpt_table set global_turn = (debit1 + credit1) + (debit_to + credit_to) + (debit2 + credit2);
  SQL delete @_rpt_table where global_turn = 0;
  SQL update statistics high for table @_rpt_table (c_accnt,c_curr);
#}

; =============================================================================
; Выписка по лицевому счету
;   (на основании распоряжений (проведенных и нет))
; =============================================================================
[UK_Report_Accnt_Statement]
const char main_class=DB_Ksrpt
const char ks_keys=c_order,c_schema,c_item_group
const char ks_order=op_day,c_order,c_schema
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_accnt,c_curr,date0,date1,c_branch,ext_coll_name
const char attrs=\
#{","
  c_order                     int
  c_schema                    int
  c_item_group                int
;
  c_naccnt_corr               int
  c_accnt_corr                int
  c_accnt_debit               int
  c_accnt_credit              int
  c_doc                       int
  debit                       money default 0
  credit                      money default 0  
; атрибуты распоряжения
  op_day                      date
  state                       int
  order_type                  int
; вычисляемые суммы
  turn                        money default 0 {оборот по счету +/-}
;
  debit1                      money default 0
  credit1                     money default 0
  debit_to                    money default 0
  credit_to                   money default 0
  debit2                      money default 0
  credit2                     money default 0
; 
  accnt_corr_kind             int default 0
  c_msfo_line_naccnt_0420005  int default 0
; атрибуты поиска
  c_branch                    int
  c_accnt                     int
  c_curr                      int
  date0                       date
  date1                       date
  ext_coll_name               char(20)
#}

const char foreigns=\
#{";"
  AccntD(AccntDay):c_accnt_debit(c_accnt),op_day(#today)
  AccntC(AccntDay):c_accnt_credit(c_accnt),op_day(#today)
  AccntCurrD(AccntCurrDay):c_accnt_debit(c_accnt),c_curr,op_day(#today)
  AccntCurrC(AccntCurrDay):c_accnt_credit(c_accnt),c_curr,op_day(#today)
;
  OrderType(uk_main::UK_Abbrs_OrderTypes):order_type(type)
  Schema(uk_main::UK_REF_Schema):c_schema
  ItemGroup(uk_main::UK_REF_Item_Groups):c_item_group
  ParamComment(uk_main::UK_Orders_Params):c_order,'$ORDER_PARAM_COMMENT_CUSTOM'(param_type)
;  
  Rep_MSFO_Line_NAccnt_0420005($CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay_0420005):c_msfo_line_naccnt_0420005(c_msfo_line_naccnt)
#}

;const char refs_x1=\
;#{";"
;  Rep_MSFO_Line_NAccnt_0420005($CURCFG::UK_Reports_MSFO_Lines_Naccnts_OnDay_0420005):c_naccnt_corr(c_naccnt),date1(#today)
;#}

const char synonyms=\
#{";"
  _xls_rest2[20]=?string("=RC[-1]")
  _koef[LONG]=?/state/((@state==$ORDER_STATE_PERFORMED) ? 1 : 0)
  _acc_corr_necurracc[20]=?/c_accnt,c_accnt_debit,AccntC.ncurracc,AccntD.ncurracc/((@c_accnt==@c_accnt_debit) ? @AccntC.ncurracc : @AccntD.ncurracc)
  _acc_corr_naccnt[LONG]=?/c_accnt,c_accnt_debit,AccntC.naccnt,AccntD.naccnt/((@c_accnt==@c_accnt_debit) ? @AccntC.naccnt : @AccntD.naccnt)
  _acc_corr_name[40]=?/c_accnt,c_accnt_debit,AccntC.AccntName.name,AccntD.AccntName.name/((@c_accnt==@c_accnt_debit) ? @AccntC.AccntName.name : @AccntD.AccntName.name)
  _isum_type[80]=![Schema.IsumType.sabbr]/[ItemGroup.shname]
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_order, c_schema, c_item_group);
  SQL create        index idx_@{_rpt_table}_1 on @_rpt_table (c_doc);
  SQL create        index idx_@{_rpt_table}_2 on @_rpt_table (op_day);
  SQL create        index idx_@{_rpt_table}_3 on @_rpt_table (c_accnt_debit);
  SQL create        index idx_@{_rpt_table}_4 on @_rpt_table (c_accnt_credit);
  SQL create        index idx_@{_rpt_table}_5 on @_rpt_table (c_accnt_corr);
  SQL create        index idx_@{_rpt_table}_6 on @_rpt_table (c_naccnt_corr);
  
; -------------------------------------
; все распоряжения, в проводках, которых, фигурирует счет
; -------------------------------------

  call("$CURCFG::$CURSEC:_add_orders_to_report_statement", @@c_accnt, @@c_curr, long(@@date0), long(@@date1), "debit", "credit");
  call("$CURCFG::$CURSEC:_add_orders_to_report_statement", @@c_accnt, @@c_curr, long(@@date0), long(@@date1), "credit", "debit");

  SQL update statistics high for table @_rpt_table (c_order, c_schema, c_doc, op_day, c_accnt_debit, c_accnt_credit, c_accnt_corr, c_naccnt_corr);

; -------------------------------------
; вид счета-корреспондента (контрагент|общий счет по проекту)
; -------------------------------------
  SQL
    update @_rpt_table set (accnt_corr_kind) =
      ((
        select a.accnt_type
        from $uk_ref_settings_accnts a
        where
          a.c_accnt   = @_rpt_table.c_accnt_corr and
          a.c_branch  = @c_branch and
          @_rpt_table.op_day between a.prev_change and a.next_change
      ))
    where exists
      (
        select *
        from $uk_ref_settings_accnts a
        where
          a.c_accnt   = @_rpt_table.c_accnt_corr and
          a.c_branch  = @c_branch and
          @_rpt_table.op_day between a.prev_change and a.next_change
      );

  SQL
    update @_rpt_table set (accnt_corr_kind) =
      ((
        select a.accnt_type
        from $uk_contractors_accnts a
        where
          a.c_accnt   = @_rpt_table.c_accnt_corr and
          @_rpt_table.op_day between a.prev_change and a.next_change
      ))
    where exists
      (
        select *
        from $uk_contractors_accnts a
        where
          a.c_accnt   = @_rpt_table.c_accnt_corr and
          @_rpt_table.op_day between a.prev_change and a.next_change
      );

; -------------------------------------
; по виду счета-корреспондента выходим на настроечные данные отчету "О движении денежных средств"
; -------------------------------------

; ---------------------------
; * для случаев, когда вид БС указан в настройках
;   (двумя селектами для оборотов по дебету и кредиту)
; ---------------------------
  call("$CURCFG::$CURSEC:_calc_c_msfo_line_naccnt_typed", "debit",   $RESTKIND_DEBIT);
  call("$CURCFG::$CURSEC:_calc_c_msfo_line_naccnt_typed", "credit",  $RESTKIND_CREDIT);

  call("$CURCFG::$CURSEC:_calc_c_msfo_line_naccnt_untyped", "debit",   $RESTKIND_DEBIT);
  call("$CURCFG::$CURSEC:_calc_c_msfo_line_naccnt_untyped", "credit",  $RESTKIND_CREDIT);

  $MONEY(_rest1,_rest2)

; -------------------------------------
; входящий остаток 
; -------------------------------------
  -SQL
    select t.rest2 into ?_rest1
    from turn_rtr t
    where
      t.c_accnt = @c_accnt and
      t.c_curr  = @c_curr and
      t.op_day  = (select max(o.op_day) from opdays o where o.op_day < ?date0);
  _rest1 = isnull(@@_rest1) ? 0 : @@_rest1;

; -------------------------------------
; исходящий остаток 
; -------------------------------------
  -SQL
    select t.rest2 into ?_rest2
    from turn_rtr t
    where
      t.c_accnt = @c_accnt and
      t.c_curr  = @c_curr and
      t.op_day  = (select max(o.op_day) from opdays o where o.op_day <= ?date1);
  _rest2 = isnull(@@_rest2) ? 0 : @@_rest2;


  -@ext_coll_name.RenewVarsFromColl(CURRENT.get_name());
#}

;> ----------------------------------------------------------------------------
;> __add_orders_to_report_statement
;> ----------------------------------------------------------------------------
const char _add_orders_to_report_statement_parms=_c_accnt,_c_curr,_date0,_date1,_fld_name,_corr_name
const char _add_orders_to_report_statement=\
#{
  SQL
    insert into @_rpt_table (
                              c_order, c_schema, c_item_group, c_doc, c_accnt_debit, c_accnt_credit,
                              @{_fld_name},
                              op_day, state, order_type,
                              c_accnt_corr, c_naccnt_corr,
                              c_accnt, c_curr, date0, date1
                            )
      select p.c_order, p.c_schema, p.c_item_group, p.c_doc, p.c_accnt_debit, p.c_accnt_credit,
             p.isum,
             p.op_day, o.state, o.order_type,
             corr.c_accnt, corr.c_naccnt,
             @_c_accnt, @_c_curr, @_date0, @_date1
      from $uk_orders_provs p
        join accnts_def corr  on corr.c_accnt = p.c_accnt_@{_corr_name}
        join $uk_orders_def o on
                                 o.c_order = p.c_order and
                                 o.state not in ($ORDER_STATE_DELETED) and
                                 o.op_day between @_date0 and @_date1 and
                                 o.c_curr  = @_c_curr
      where
        p.c_accnt_@{_fld_name}  = @_c_accnt;
#}

;> ----------------------------------------------------------------------------
;> __calc_c_msfo_line_naccnt_typed
;> ----------------------------------------------------------------------------
const char _calc_c_msfo_line_naccnt_typed_parms=_fld_turn,_rest_kind
const char _calc_c_msfo_line_naccnt_typed=\
#{

  SQL
    update @_rpt_table set c_msfo_line_naccnt_0420005 =
      (
        select n.c_msfo_line_naccnt
        from $uk_reports_msfo_lines_naccnts n
          join $uk_reports_msfo_lines_def l on l.c_msfo_line = n.c_msfo_line and l.msfo_report = $MSFO_REPORT_CASH_FLOWS
        where
          n.c_naccnt    = @_rpt_table.c_naccnt_corr and
          n.rest_kind   = @_rest_kind and
          nvl(n.accnt_kinds, "") <> "" and
          n.accnt_kinds matches "*" || @_rpt_table.accnt_corr_kind || "*"
      )
    where
      @_fld_turn      > 0 and
      accnt_corr_kind > 0 and
      exists
      (
        select *
        from $uk_reports_msfo_lines_naccnts n
          join $uk_reports_msfo_lines_def l on l.c_msfo_line = n.c_msfo_line and l.msfo_report = $MSFO_REPORT_CASH_FLOWS
        where
          n.c_naccnt    = @_rpt_table.c_naccnt_corr and
          n.rest_kind   = @_rest_kind and
          nvl(n.accnt_kinds, "") <> "" and
          n.accnt_kinds matches "*" || @_rpt_table.accnt_corr_kind || "*"
      );
#}

;> ----------------------------------------------------------------------------
;> __calc_c_msfo_line_naccnt_untyped
;> ----------------------------------------------------------------------------
const char _calc_c_msfo_line_naccnt_untyped_parms=_fld_turn,_rest_kind
const char _calc_c_msfo_line_naccnt_untyped=\
#{
  SQL
    update @_rpt_table set c_msfo_line_naccnt_0420005 =
      (
        select n.c_msfo_line_naccnt
        from $uk_reports_msfo_lines_naccnts n
          join $uk_reports_msfo_lines_def l on l.c_msfo_line = n.c_msfo_line and l.msfo_report = $MSFO_REPORT_CASH_FLOWS
        where
          n.c_naccnt    = @_rpt_table.c_naccnt_corr and
          n.rest_kind   = @_rest_kind and
          nvl(n.accnt_kinds, "") = ""
      )
    where
      @_fld_turn      > 0 and
;      c_msfo_line_naccnt_0420005 = 0 and
      exists
      (
        select *
        from $uk_reports_msfo_lines_naccnts n
          join $uk_reports_msfo_lines_def l on l.c_msfo_line = n.c_msfo_line and l.msfo_report = $MSFO_REPORT_CASH_FLOWS
        where
          n.c_naccnt    = @_rpt_table.c_naccnt_corr and
          n.rest_kind   = @_rest_kind and
          nvl(n.accnt_kinds, "") = ""
      );
#}



; =============================================================================
; Информация по счетам, задействованым в распоряжении
; =============================================================================
[UK_Report_Accnts_For_Order]
const char main_class=DB_Ksrpt
const char ks_keys=c_accnt
const char ks_order=c_accnt,c_curr
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_order,state
const char attrs=\
#{","
  c_accnt         int
  c_curr          int
  op_day          date
; остатки (нужно считать)
  rest1           money default 0
  debit_to        money default 0
  credit_to       money default 0
  rest2           money default 0
; атрибуты поиска
  c_order         int
  state           int
#}

const char foreigns=\
#{";"
  AccntDay:c_accnt,op_day(#today)
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_accnt, c_curr);

; -------------------------------------
; счета по дебету
; -------------------------------------
  SQL
    insert into @_rpt_table (c_accnt, c_curr, op_day, c_order)
      select distinct p.c_accnt_debit, o.c_curr, o.op_day, o.c_order
      from $uk_orders_def o
        join $uk_orders_provs p on p.c_order = o.c_order
      where
        o.c_order = @c_order;
  SQL update statistics high for table @_rpt_table (c_accnt, c_curr);

; -------------------------------------
; счета по кредиту
; -------------------------------------
  SQL
    insert into @_rpt_table (c_accnt, c_curr, op_day, c_order)
      select distinct p.c_accnt_credit, o.c_curr, o.op_day, o.c_order
      from $uk_orders_def o
        join $uk_orders_provs p on p.c_order = o.c_order
      where
        o.c_order = @c_order and
        not exists (select * from @_rpt_table where c_accnt = p.c_accnt_credit);
  SQL update statistics high for table @_rpt_table (c_accnt, c_curr);


  $CHAR(_fld_rest_real,_fld_rest_calc,_sign1,_sign2)

; -------------------------------------
; если распоряжение обработано:
;   исх. остатки будут исходящими, а входящие вычисляем по оборотам
;         иначе (необработано):
;   исх. остатки будут входящими, а исходящие вычисляем по оборотам
; -------------------------------------
  _fld_rest_real = (@@state == $ORDER_STATE_PERFORMED) ? "rest2" : "rest1";

; -------------------------------------
; реальный остаток
; -------------------------------------
  SQL
    update @_rpt_table set (@_fld_rest_real) =
      ((
        select t.rest2
        from turn_rtr t
        where
          t.c_accnt = @_rpt_table.c_accnt and
          t.c_curr  = @_rpt_table.c_curr and
          t.op_day  = @_rpt_table.op_day
      ));

; -------------------------------------
; обороты
; -------------------------------------
  call("$CURCFG::$CURSEC:_update_turnover", "debit",  "debit" );
  call("$CURCFG::$CURSEC:_update_turnover", "credit", "credit");

 
; -------------------------------------
; вычисляемый остаток
; -------------------------------------
    _fld_rest_calc = (@@state == $ORDER_STATE_PERFORMED) ? "rest1" : "rest2";
    _sign1         = (@@state == $ORDER_STATE_PERFORMED) ? "-"     : "+";
    _sign2         = (@@state == $ORDER_STATE_PERFORMED) ? "+"     : "-";
  SQL update @_rpt_table set @_fld_rest_calc = @_fld_rest_real @_sign1 debit_to @_sign2 credit_to;
#}

;> ----------------------------------------------------------------------------
;> __update_turnover
;> ----------------------------------------------------------------------------
const char _update_turnover_parms=_fld_turn,_fld_accnt
const char _update_turnover=\
#{
  SQL
    update @_rpt_table set (@{_fld_turn}_to) =
      ((
        select sum(p.isum)
        from $uk_orders_provs p
        where
          p.c_order               = @_rpt_table.c_order and
          p.c_accnt_@{_fld_accnt} = @_rpt_table.c_accnt
      ))
    where exists
      (
        select *
        from $uk_orders_provs p
        where
          p.c_order               = @_rpt_table.c_order and
          p.c_accnt_@{_fld_accnt} = @_rpt_table.c_accnt
      );
#}

; =============================================================================
; Выписка по лицевому счету
;   (на основании распоряжений (проведенных и нет))
; =============================================================================
[UK_Report_Orders_For_Accnt]
const char main_class=DB_Ksrpt
const char ks_keys=c_order
const char ks_order=op_day,c_order
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_accnt,c_curr,order_state,is_hide_deleted
const char attrs=\
#{","
  c_order         int
;
  op_day          date
  debit_to        money default 0
  credit_to       money default 0  
; атрибуты поиска
  c_accnt         int
  c_curr          int
  order_state     int
  is_hide_deleted int
#}

const char foreigns=\
#{";"
  Order(uk_main::UK_Orders_Def):c_order
#}

const char spc_codes=\
#{";"
  $spc_uk_orders_performed_full          (<Order.$spc_uk_orders_performed_full>)
  $spc_uk_orders_performed_full_rollback (<Order.$spc_uk_orders_performed_full_rollback>)
#}


;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_order);
  SQL create        index idx_@{_rpt_table}_1 on @_rpt_table (op_day);

; -------------------------------------
; все распоряжения, в проводках, которых, фигурирует счет
; -------------------------------------

  call("$CURCFG::$CURSEC:_add_orders_to_report_accnt", @@c_accnt, @@c_curr, "debit", @@order_state, @@is_hide_deleted);

  SQL
    update @_rpt_table set (credit_to) =
      ((
        select sum(p.isum)
        from $uk_orders_provs p
          join $uk_orders_def o on
                                   o.c_order = p.c_order and
                                   o.c_curr  = @_rpt_table.c_curr
        where
          p.c_order         = @_rpt_table.c_order and
          p.c_accnt_credit  = @_rpt_table.c_accnt
      ))
    where exists
      (
        select *
        from $uk_orders_provs p
          join $uk_orders_def o on
                                   o.c_order = p.c_order and
                                   o.c_curr  = @_rpt_table.c_curr
        where
          p.c_order         = @_rpt_table.c_order and
          p.c_accnt_credit  = @_rpt_table.c_accnt
      );
      
  call("$CURCFG::$CURSEC:_add_orders_to_report_accnt", @@c_accnt, @@c_curr, "credit", @@order_state, @@is_hide_deleted);

  SQL update statistics high for table @_rpt_table (c_order, op_day);
#}

;> ----------------------------------------------------------------------------
;> __add_orders_to_report_accnt
;> ----------------------------------------------------------------------------
const char _add_orders_to_report_accnt_parms=_c_accnt,_c_curr,_fld_name,_order_state,_is_hide_deleted
const char _add_orders_to_report_accnt=\
#{
  $CHAR(_where_order_state,_where_deleted)
    _where_order_state = (@@_order_state == $_EMPTY)    ? "o.state"                                    : "@_order_state";
    _where_deleted     = (@@_is_hide_deleted == $_TRUE) ? "o.state not in ($ORDER_STATE_DELETED) and"  : "";

  SQL
    insert into @_rpt_table (c_order, 
                             @{_fld_name}_to,
                             op_day, 
                             c_accnt, c_curr)
      select o.c_order,
             sum(p.isum),
             o.op_day,
             @_c_accnt, @_c_curr
      from $uk_orders_provs p
        join $uk_orders_def o on
                                 o.c_order = p.c_order and
                                 o.c_curr  = @_c_curr  and
                                 o.order_type not in ($ORDER_TYPE_DUMMY_EMPLOYEE_INIT) and
                                 @_where_deleted
                                 o.state in (@_where_order_state)
      where
        p.c_accnt_@{_fld_name}  = @_c_accnt and
        not exists (select * from @_rpt_table where c_order = p.c_order)
      group by o.c_order, o.op_day;
#}


; =============================================================================
; Отчет по работнику/ам (суммы за период)
; =============================================================================
[UK_Report_Employee_Isums_For_Period]
const char main_class=DB_Ksrpt
const char ks_keys=c_employee,param_type
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_employee,date0,date1
const char attrs=\
#{","
  c_employee      int
  param_type      int
  isum            money default 0
;
  date0           date
  date1           date
#}

const char foreigns=\
#{";"
  Employee(uk_main::UK_Employees_Def):c_employee
  ParamType(uk_main::UK_Abbrs_CalcParams):param_type(type)
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  $LONG(_date0,_date1)
  $CHAR(_where_employee)
    _date0 = long(@@date0);
    _date1 = long(@@date1);
    _where_employee = (@@c_employee == $_EMPTY) ? "o.c_employee" : "@c_employee";

  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_employee, param_type);


; -------------------------------------
; заполняем все суммы
; -------------------------------------

; ---------------------------
; 1) всего начисленно
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_PAIM_GROSS,
                                                        "$ORDER_TYPE_EMPLOYEE_VACATION_PAID, $ORDER_TYPE_EMPLOYEE_SALARY_PRI, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY_WO_FUNDS",
                                                        "$SCHEMA_ISUM_LABOUR_PAYMENT_GROSS",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 2) начислено по з/п (оклад по дням)
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_PAIM_SALARY_GROSS,
                                                        "$ORDER_TYPE_EMPLOYEE_SALARY_PRI, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY_WO_FUNDS",
                                                        "$SCHEMA_ISUM_LABOUR_PAYMENT_GROSS",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 3) оплата отпуска по календарным дням
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_PAIM_VACATION_NET,
                                                        "$ORDER_TYPE_EMPLOYEE_VACATION_PAID",
                                                        "$SCHEMA_ISUM_LABOUR_PAYMENT_NET_FULL",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 4) пособие по уходу за ребенком до 1.5 лет (ФСС)
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_CHILD_FSS,
                                                        "$ORDER_TYPE_EMPLOYEE_CHILD_PAYMENT",
                                                        "$SCHEMA_ISUM_LABOUR_CHILD_PAYMENT_FSS",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 5) пособие по уходу за ребенком до 3 лет (работодатель)
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_CHILD_FIRM,
                                                        "$ORDER_TYPE_EMPLOYEE_CHILD_PAYMENT",
                                                        "$SCHEMA_ISUM_LABOUR_CHILD_PAYMENT_FIRM",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 6) всего удержано с начисленных сумм
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_DEDUCTION,
                                                        "$ORDER_TYPE_EMPLOYEE_VACATION_PAID, $ORDER_TYPE_EMPLOYEE_SALARY_PRI, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY_WO_FUNDS",
                                                        "$SCHEMA_ISUM_LABOUR_NDFL, $SCHEMA_ISUM_LABOUR_PFR_DEDUCTION",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 7) добровольные перечисления в ПФР
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_DEDUCTION_PFR,
                                                        "$ORDER_TYPE_EMPLOYEE_SALARY_PRI",
                                                        "$SCHEMA_ISUM_LABOUR_PFR_DEDUCTION",
                                                        @@_date0, @@_date1
      );

; ---------------------------
; 8) удержанный НДФЛ
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_NDFL,
                                                        "$ORDER_TYPE_EMPLOYEE_VACATION_PAID, $ORDER_TYPE_EMPLOYEE_SALARY_PRI, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY_WO_FUNDS"
                                                        "$SCHEMA_ISUM_LABOUR_NDFL",
                                                        @@_date0, @@_date1
      );


; ---------------------------
; 9) выплачено на руки
; ---------------------------
  call("$CURCFG::$CURSEC:_add_employee_isum_to_report", 
                                                        $CALC_PARAM_EMPLOYEE_NDFL,
                                                        "$ORDER_TYPE_EMPLOYEE_VACATION_PAID, $ORDER_TYPE_EMPLOYEE_SALARY_PRI, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY, $ORDER_TYPE_EMPLOYEE_EXTRA_MONEY_WO_FUNDS"
                                                        "$SCHEMA_ISUM_LABOUR_PAYMENT_NET_FULL, $SCHEMA_ISUM_LABOUR_PAYMENT_NET_ADV, $SCHEMA_ISUM_LABOUR_PAYMENT_NET_PRI",
                                                        @@_date0, @@_date1
      );

#}

;> ----------------------------------------------------------------------------
;> __add_employee_isum_to_report
;> ----------------------------------------------------------------------------
const char _add_employee_isum_to_report_parms=_param_type,_order_types,_isum_types,_date0,_date1
const char _add_employee_isum_to_report=\
#{
  SQL
    insert into @_rpt_table (c_employee, param_type, date0, date1) 
      select o.c_employee, @_param_type, @_date0, @_date1
      from $uk_employees_def o
      where
        o.c_employee in ( @_where_employee);
  SQL update statistics high for table @_rpt_table (c_employee, param_type);

  SQL
    update @_rpt_table set isum =
        (
          select sum(s.isum)
          from $uk_orders_def o
            join $uk_orders_isums s on
                                       s.c_order   = o.c_order and
                                       s.isum_type in (@_isum_types)
          where
            o.op_day between @_date0 and @_date1        and
            o.state      in ( $ORDER_STATE_PERFORMED )  and
            o.order_type in ( @_order_types )           and
            o.c_employee in ( @_rpt_table.c_employee)      
        )
    where
      param_type = @_param_type and
      exists
        (
          select *
          from $uk_orders_def o
            join $uk_orders_isums s on
                                       s.c_order   = o.c_order and
                                       s.isum_type in (@_isum_types)
          where
            o.op_day between @_date0 and @_date1        and
            o.state      in ( $ORDER_STATE_PERFORMED )  and
            o.order_type in ( @_order_types )           and
            o.c_employee in ( @_rpt_table.c_employee)      
        );
#}


; =============================================================================
; проверка лицевых счетов на "Красное Сальдо"
; =============================================================================
[UK_Report_RedSaldo]
const char main_class=DB_Ksrpt
const char ks_keys=c_accnt,op_day
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=date0,date1,c_branch
const char attrs=\
#{","
  c_accnt         int
  c_curr          int
  op_day          date
  type            int
;
  debit           money default 0
  credit          money default 0
  rdebit          money default 0
  rcredit         money default 0
;
  c_branch        int
  date0           date
  date1           date
#}

const char foreigns=\
#{";"
  Curr:c_curr
  BranchAll:c_branch
  Accnt(AccntDay):c_accnt,op_day(#today)
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_accnt, c_curr, op_day);
  SQL create        index idx_@{_rpt_table}_1 on @_rpt_table (type, debit, credit, rdebit, rcredit);
  SQL update statistics high for table @_rpt_table (c_accnt, c_curr, op_day, type, debit, credit, rdebit, rcredit);

  $LONG(_user_access,_date0,_date1)
    StdEnv.GetVarLong("user_access","_user_access");
    _date0 = long(@@date0);
    _date1 = long(@@date1);


;  KernRptBankRests( @@_date0, @@_date1,  "", "ad.nactpass type,t.c_accnt", "gg", "",  $KERN_RPT_CURR_RBL, $KERN_RPT_OUT, $KERN_RPT_TURN_NO_OP, "tmp_report");



  SQL create temp table _tmp_table (${.:attrs}) with no log;

; -------------------------------------
; рублевые счета
; -------------------------------------
  SQL
    insert into @_tmp_table (c_accnt, c_curr, op_day, type, c_branch, debit, credit, rdebit, rcredit)
      select  t.c_accnt, t.c_curr, t.op_day, a.nactpass, a.c_branch, sum(t.debit2), sum(t.credit2), sum(t.debit2), sum(t.credit2)
      from turnovers t
        join accnts_def a on a.c_accnt=t.c_accnt
      where
        t.op_day between @_date0 and @_date1 and
        t.c_curr = $CURR_ROUBLE and
;        
        @c_branch in ($BRANCH_CONS, a.c_branch) and
        a.access <= @_user_access and 
        a.nactpass != $ACCNT_TYPE_APB
      group by 1,2,3,4,5;

; -------------------------------------
; валютные счета
; -------------------------------------
  SQL
    insert into @_tmp_table (c_accnt, c_curr, op_day, type, c_branch, debit, credit, rdebit, rcredit)
      select t.c_accnt, t.c_curr, t.op_day, a.nactpass, a.c_branch, sum(t.debit2), sum(t.credit2), sum(rt.debit2), sum(rt.credit2) 
      from turnovers t
        join rturnovers rt on rt.op_day=t.op_day and rt.c_accnt=t.c_accnt and rt.c_curr=t.c_curr
        join accnts_def a on  a.c_accnt=t.c_accnt
      where
        t.op_day between @_date0 and @_date1 and
;
        @c_branch in ($BRANCH_CONS, a.c_branch) and
        a.access <= @_user_access and 
        a.nactpass != $ACCNT_TYPE_APB 
      group by 1,2,3,4,5;

  SQL create unique index idx_@{_tmp_table}_0 on @_tmp_table (c_accnt, c_curr, op_day);
  SQL create        index idx_@{_tmp_table}_1 on @_tmp_table (type, debit, credit, rdebit, rcredit);
  SQL update statistics high for table @_tmp_table (c_accnt, c_curr, op_day, type, debit, credit, rdebit, rcredit);


; -------------------------------------
; удаляем у которых всё хорошо
; -------------------------------------

; remove not "red"
  SQL
    delete from @_tmp_table
    where type=$ACCNT_TYPE_ACTIVE  and debit>=credit and rdebit>=rcredit;
      
  SQL
    delete from @_tmp_table
    where type=$ACCNT_TYPE_PASSIVE and debit<=credit and rdebit<=rcredit;

  SQL
    delete from @_tmp_table
    where debit=0 and credit=0 and rdebit=0 and rcredit=0;

  SQL update statistics high for table @_tmp_table (c_accnt, c_curr, op_day, type, debit, credit, rdebit, rcredit);

; -------------------------------------
  SQL insert into @_rpt_table select * from @_tmp_table;
  SQL update statistics high for table @_rpt_table (c_accnt, c_curr, op_day, type, debit, credit, rdebit, rcredit);

  SQL
    update @_rpt_table set date1 =
      (
        select min(t.op_day) - 1
        from @_tmp_table t
        where
          t.c_accnt =  @_rpt_table.c_accnt and
          t.c_curr  =  @_rpt_table.c_curr and
          t.op_day  >= @_rpt_table.op_day and
          (t.credit <> @_rpt_table.credit or t.debit <> @_rpt_table.debit)
      )
; -------------------------------------




;  SQL delete from report
;      where not( type=$ACCNT_TYPE_ACTIVE  and debit<credit and rdebit<rcredit or
;                 type=$ACCNT_TYPE_PASSIVE and debit>credit and rdebit>rcredit);


;  CarbonCopy(
;    "select ad.ncurracc curracc,ta.abbr type_ap,"+
;      "ci.abbr curr,"+
;      "r.debit,r.credit,"+
;      "an.name "+
;    "from report r "+
;      "join accnts_def ad on ad.c_accnt=r.c_accnt "+
;      "join abbrs ta on ta.type=r.type "+
;      "join curr_info ci on ci.c_curr=r.c_curr "+
;      "join accnts_name an on an.c_accnt=r.c_accnt and "+
;        "'@Date1' between an.prev_change and an.next_change "+
;    "order by ad.ncurracc,r.c_curr" );
#}

; =============================================================================
; Отчет по работнику/ам (остатки на 603 счетах)
; =============================================================================
[UK_Report_Employee_Accnts603_Rests]
const char main_class=DB_Ksrpt
const char ks_keys=c_employee,accnt_type
const char mode=sr
const char read_access=any
const char cursor_type=scroll
const char base_attrs=c_employee,op_day
const char attrs=\
#{","
  c_employee      int
  accnt_type      int
  c_accnt         int
  credit2         money default 0
;
  op_day          date
#}

const char foreigns=\
#{";"
  Employee(uk_main::UK_Employees_Def):c_employee
  AccntType(uk_main::UK_Abbrs_AccntEmployeeTypes):accnt_type(type)
  Accnt(AccntDay):c_accnt,op_day(#today)
#}

;> ----------------------------------------------------------------------------
;> __pipe_subobj
;> ----------------------------------------------------------------------------
const char pipe_subobj=\
#{
  $LONG(_op_day)
  $CHAR(_where_employee)
    _op_day = long(@@op_day);
    _where_employee = (@@c_employee == $_EMPTY) ? "e.c_employee" : "@c_employee";

  SQL create unique index idx_@{_rpt_table}_0 on @_rpt_table (c_employee, accnt_type);

  SQL
    insert into @_rpt_table (c_employee, accnt_type, c_accnt, credit2, op_day)
      select e.c_employee, a.accnt_type, a.c_accnt, NVL(t.credit2, 0), @_op_day
      from $uk_employees_def e
        join $uk_employees_accnts a on
                                        a.c_employee = e.c_employee and
                                        a.accnt_type in (
                                                          $ACCNTEMPLOYEE_TYPE_SALARY,
                                                          $ACCNTEMPLOYEE_TYPE_INSURANCE_PFR,
                                                          $ACCNTEMPLOYEE_TYPE_INSURANCE_FSS,
                                                          $ACCNTEMPLOYEE_TYPE_INSURANCE_FSS_ACC,
                                                          $ACCNTEMPLOYEE_TYPE_INSURANCE_OMS
                                                        ) and
                                        @_op_day between a.prev_change and a.next_change
        left join turnovers t on
                                        t.c_accnt = a.c_accnt and
                                        t.c_curr  = $CURR_ROUBLE and
                                        t.op_day  = @_op_day
      where
        e.c_employee in (@_where_employee);
  SQL update statistics high for table @_rpt_table (c_employee, accnt_type);
#}


[]
